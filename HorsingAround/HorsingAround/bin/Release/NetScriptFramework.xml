<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetScriptFramework</name>
    </assembly>
    <members>
        <member name="T:NetScriptFramework.CrashLogEventArgs">
            <summary>
            Event arguments for a crash log event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:NetScriptFramework.CrashLogEventArgs.Log">
            <summary>
            Gets the crash log instance.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CrashLogEventArgs.Output">
            <summary>
            Gets the output. This is what will be written to file after all is finished.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CrashLogEventArgs.Skip">
            <summary>
            Gets or sets a value indicating whether crash log should skip writing to file. If this is set to true
            then the file will not be written.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CrashLogEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the crash is handled and game should try to continue executing. Default
            is false meaning the game will close after writing the crash log. This is only used for native exceptions.
            </summary>
        </member>
        <member name="T:NetScriptFramework.CrashLog">
            <summary>
            This is used to generate a crash log.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CrashLog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.CrashLog"/> class.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CrashLog.OnBeforeWrite">
            <summary>
            Occurs before writing the crash log.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CrashLog.OnAfterWrite">
            <summary>
            Occurs after writing the crash log.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CrashLog.Modules">
            <summary>
            Gets the modules collection.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CrashLog.MainModule">
            <summary>
            Gets the main module of process.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CrashLog.Culture">
            <summary>
            The culture to use for formatting.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CrashLog.IsNewLine">
            <summary>
            Are we starting on a new line right now?
            </summary>
        </member>
        <member name="F:NetScriptFramework.CrashLog.TabCount">
            <summary>
            The tab count to write.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CrashLog.TabCharacter">
            <summary>
            The tab character.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CrashLog.Builder">
            <summary>
            The builder.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CrashLog.Skipped">
            <summary>
            Gets a value indicating whether this <see cref="T:NetScriptFramework.CrashLog"/> is skipped.
            </summary>
            <value>
              <c>true</c> if skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:NetScriptFramework.CrashLog.RememberedLocationForInterestingObjects">
            <summary>
            The remembered location for interesting objects.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CrashLog.BeginGroup(System.String)">
            <summary>
            Begins the group.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NetScriptFramework.CrashLog.EndGroup">
            <summary>
            Ends the group.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CrashLog.Write(System.Boolean,System.String,System.Boolean)">
            <summary>
            Writes the crash log to file.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CrashLog.DoWrite(System.DateTime,System.Boolean)">
            <summary>
            Does the write.
            </summary>
            <param name="now"></param>
            <param name="append"></param>
        </member>
        <member name="M:NetScriptFramework.CrashLog.Initialize(System.Int32)">
            <summary>
            Initializes this instance for log writing.
            </summary>
            <param name="stackCount">Stack pointer count.</param>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteLine(System.String)">
            <summary>
            Writes the line of text to log.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:NetScriptFramework.CrashLog.Write(System.String)">
            <summary>
            Writes the specified text to log without a newline.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:NetScriptFramework.CrashLog.PageWidth">
            <summary>
            Gets the average maximum expected width of the line in log.
            </summary>
            <value>
            The width of the page.
            </value>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteDelimiter(System.Boolean)">
            <summary>
            Writes the delimiter to log.
            </summary>
            <param name="file">if set to <c>true</c> then delimit with another log, otherwise delimit section.</param>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteInfo">
            <summary>
            Writes the information line of crash. This is the same line that goes to main log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteHeader(System.DateTime)">
            <summary>
            Writes the header information.
            </summary>
            <param name="now">Time of crash.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteCallStack">
            <summary>
            Writes the call stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteInterestingObjects">
            <summary>
            Writes the interesting objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteRegisters">
            <summary>
            Writes the registers. This is only valid for native exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteFullStack">
            <summary>
            Writes the full stack. This is only valid for native exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteModules">
            <summary>
            Writes the modules list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WritePlugins">
            <summary>
            Writes the plugins list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.WriteExtraInfo">
            <summary>
            Writes extra information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.GetAddressInModule(System.IntPtr,System.Diagnostics.ProcessModuleCollection,System.String)">
            <summary>
            Gets the address in module.
            </summary>
            <param name="addr">The address.</param>
            <param name="modules">The modules.</param>
            <param name="prefix">Add this prefix if found.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.TryGetCodeOffset(System.IntPtr,System.Diagnostics.ProcessModuleCollection,System.Int32@,System.Diagnostics.ProcessModule@)">
            <summary>
            Tries the get module where address is in.
            </summary>
            <param name="addr">The address.</param>
            <param name="modules">The modules collection.</param>
            <param name="offset">The offset.</param>
            <param name="module">The module.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.ParseArgument(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse an argument from this object.
            </summary>
            <param name="key">Keyword for argument.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.ParseVariable(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a variable from this object.
            </summary>
            <param name="key">Keyword for variable.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CrashLog.ParseFunction(System.String,System.String[],NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a function from this object.
            </summary>
            <param name="key">Keyword for function.</param>
            <param name="args">Arguments for function.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.NativeCrashLog">
            <summary>
            This is used to generate a crash log.
            </summary>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.#ctor(NetScriptFramework.CPURegisters)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.NativeCrashLog"/> class.
            </summary>
            <param name="ctx">The context of thread that crashed.</param>
        </member>
        <member name="F:NetScriptFramework.NativeCrashLog.Context">
            <summary>
            The context of thread that crashed.
            </summary>
        </member>
        <member name="P:NetScriptFramework.NativeCrashLog.FullStack">
            <summary>
            The full stack.
            </summary>
        </member>
        <member name="P:NetScriptFramework.NativeCrashLog.CallStack">
            <summary>
            The call stack.
            </summary>
        </member>
        <member name="P:NetScriptFramework.NativeCrashLog.InterestingObjects">
            <summary>
            Gets the interesting objects.
            </summary>
            <value>
            The interesting objects.
            </value>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.ParseArgument(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse an argument from this object.
            </summary>
            <param name="key">Keyword for argument.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.NativeCrashLog.NormalRegisters">
            <summary>
            The normal registers.
            </summary>
        </member>
        <member name="F:NetScriptFramework.NativeCrashLog.FPURegisters">
            <summary>
            The fpu registers.
            </summary>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.ParseVariable(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a variable from this object.
            </summary>
            <param name="key">Keyword for variable.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.ParseFunction(System.String,System.String[],NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a function from this object.
            </summary>
            <param name="key">Keyword for function.</param>
            <param name="args">Arguments for function.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.Initialize(System.Int32)">
            <summary>
            Initializes this instance for log writing.
            </summary>
            <param name="stackCount">Stack pointer count.</param>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteInfo">
            <summary>
            Writes the information line of crash. This is the same line that goes to main log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteCallStack">
            <summary>
            Writes the call stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteRegisters">
            <summary>
            Writes the registers. This is only valid for native exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteFullStack">
            <summary>
            Writes the full stack. This is only valid for native exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteInterestingObjects">
            <summary>
            Writes the interesting objects.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.NativeCrashLog.LabelSize">
            <summary>
            The label size.
            </summary>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteAddress(System.String,System.IntPtr,System.Boolean,NetScriptFramework.InterestingCrashLogObjects,System.Int32)">
            <summary>
            Writes the address to stream.
            </summary>
            <param name="label">The label (optional).</param>
            <param name="value">The value.</param>
            <param name="evaluate">if set to <c>true</c> evaluate address to try and see what it is.</param>
            <param name="gatherer">The gatherer.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteAddressCallStack(System.String,System.IntPtr)">
            <summary>
            Writes the call stack address to stream.
            </summary>
            <param name="label">The label (optional).</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.GetFunctionAddressInfo(System.IntPtr,System.Boolean)">
            <summary>
            Gets the function address information.
            </summary>
            <param name="value">The value.</param>
            <param name="full">Get full info, if false then only get the shortest best info we can.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.GuessValueTypes(System.IntPtr,NetScriptFramework.GameInfo.GameTypeInfo@,System.String@)">
            <summary>
            Guesses the value types.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="simple">The simple type.</param>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.GetValueInfo(System.IntPtr)">
            <summary>
            Gets the value information.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.GuessValueTypes(System.IntPtr)">
            <summary>
            Guesses the value types.
            </summary>
            <param name="ptr">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.WriteText(System.String,System.String)">
            <summary>
            Writes the text to stream.
            </summary>
            <param name="label">The label (optional).</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.GetStack(System.IntPtr,System.Int32)">
            <summary>
            Gets the stack memory values.
            </summary>
            <param name="start">The start of stack address.</param>
            <param name="count">The count of values to get.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.FilterCallStack(System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Filters the stack and leaves only addresses with function calls.
            </summary>
            <param name="stack">The stack.</param>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.GetCallStack(System.IntPtr,System.Int32,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Gets the call stack.
            </summary>
            <param name="start">The start.</param>
            <param name="count">The count.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.IsFunctionCallReturnAddress(System.IntPtr)">
            <summary>
            Determines whether the specified address is function call return address - meaning it has a function call before it.
            </summary>
            <param name="ptr">The address.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetScriptFramework.NativeCrashLog.Test(System.String,System.Byte[])">
            <summary>
            Tests the specified memory for bytes.
            </summary>
            <param name="fmt">The format.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.ManagedCrashLog">
            <summary>
            This is used to generate a crash log.
            </summary>
            <seealso cref="T:NetScriptFramework.CrashLog" />
        </member>
        <member name="M:NetScriptFramework.ManagedCrashLog.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.ManagedCrashLog"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="F:NetScriptFramework.ManagedCrashLog.OriginalException">
            <summary>
            The original exception.
            </summary>
        </member>
        <member name="F:NetScriptFramework.ManagedCrashLog.CurrentException">
            <summary>
            The current exception.
            </summary>
        </member>
        <member name="M:NetScriptFramework.ManagedCrashLog.WriteInfo">
            <summary>
            Writes the information line of crash. This is the same line that goes to main log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.ManagedCrashLog.WriteCallStack">
            <summary>
            Writes the call stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.ManagedCrashLog.ParseArgument(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse an argument from this object.
            </summary>
            <param name="key">Keyword for argument.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.ManagedCrashLog.ParseVariable(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a variable from this object.
            </summary>
            <param name="key">Keyword for variable.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.ManagedCrashLog.ParseFunction(System.String,System.String[],NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a function from this object.
            </summary>
            <param name="key">Keyword for function.</param>
            <param name="args">Arguments for function.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.InterestingCrashLogObjects">
            <summary>
            Helper class for gathering objects of interest during a crash.
            </summary>
        </member>
        <member name="M:NetScriptFramework.InterestingCrashLogObjects.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.InterestingCrashLogObjects"/> class.
            </summary>
        </member>
        <member name="T:NetScriptFramework.InterestingCrashLogObjects.Entry">
            <summary>
            Object entry.
            </summary>
        </member>
        <member name="P:NetScriptFramework.InterestingCrashLogObjects.Entry.Object">
            <summary>
            Gets or sets the object.
            </summary>
            <value>
            The object.
            </value>
        </member>
        <member name="P:NetScriptFramework.InterestingCrashLogObjects.Entry.Distance">
            <summary>
            Gets or sets the distance.
            </summary>
            <value>
            The distance.
            </value>
        </member>
        <member name="F:NetScriptFramework.InterestingCrashLogObjects.Map">
            <summary>
            The map of objects.
            </summary>
        </member>
        <member name="F:NetScriptFramework.InterestingCrashLogObjects.CurrentDistance">
            <summary>
            The current distance.
            </summary>
        </member>
        <member name="M:NetScriptFramework.InterestingCrashLogObjects.Add(NetScriptFramework.IMemoryObject)">
            <summary>
            Adds the specified object. Returns true if the object was added now, otherwise false (could still have modified distance if false).
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:NetScriptFramework.InterestingCrashLogObjects.GetSortedObjects(System.Int32)">
            <summary>
            Gets the sorted objects.
            </summary>
            <param name="maxDistance">The maximum distance.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.DebugMessageListener">
            <summary>
            A debug message listener.
            </summary>
        </member>
        <member name="M:NetScriptFramework.DebugMessageListener.OnMessage(NetScriptFramework.Plugin,System.String)">
            <summary>
            Called when message is received.
            </summary>
            <param name="sender">The sender plugin.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:NetScriptFramework.GameInfo">
            <summary>
            Contains custom information about the application types and addresses.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.#ctor(System.UInt64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo" /> class.
            </summary>
            <param name="baseOffset">The base offset.</param>
            <param name="is64Bit">if set to <c>true</c> then library is 64 bit.</param>
        </member>
        <member name="F:NetScriptFramework.GameInfo.Is64Bit">
            <summary>
            The library is 64-bit?
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.registrationList">
            <summary>
            The registration list.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.cachedValues">
            <summary>
            The cached values.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.functionsList">
            <summary>
            The functions.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.typesList">
            <summary>
            The types.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.globalsList">
            <summary>
            The globals.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.vidAddrMap">
            <summary>
            The vid address map.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.vtTpMap">
            <summary>
            The vftable type map.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.uqTpMap">
            <summary>
            The unique id type map.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.vidFnMap">
            <summary>
            The vid function map.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.vidGbMap">
            <summary>
            The vid global map.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.tiiMap">
            <summary>
            The type instance info map.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.FileVersion">
            <summary>
            The file version.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.AliasFileVersion">
            <summary>
            The alias file version.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.LibraryVersion">
            <summary>
            The library version.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.HashVersion">
            <summary>
            The hash version.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.BaseOffset">
            <summary>
            The base offset.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.LibraryBaseOffset">
            <summary>
            Gets the library base offset.
            </summary>
            <value>
            The library base offset.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.Types">
            <summary>
            Gets the types.
            </summary>
            <value>
            The types.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.Globals">
            <summary>
            Gets the globals.
            </summary>
            <value>
            The globals.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.Functions">
            <summary>
            Gets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.CachedValues">
            <summary>
            Gets the cached values.
            </summary>
            <value>
            The cached values.
            </value>
        </member>
        <member name="M:NetScriptFramework.GameInfo.DumpVids(System.IO.FileInfo)">
            <summary>
            Dumps the version independent identifiers to specified file. Format will be "id tab offset" on each line.
            </summary>
            <param name="targetFileInfo">The target file information.</param>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GetTypeInfo(System.IntPtr,System.Boolean)">
            <summary>
            Gets the type from vtable address.
            </summary>
            <param name="vtable">The vtable address.</param>
            <param name="withBaseOffset">Does the address include base offset of module?</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.GameInfo.FunctionSearcher">
            <summary>
            Comparer for function search.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.FunctionSearcher.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="M:NetScriptFramework.GameInfo.FunctionSearcher.Compare(NetScriptFramework.GameInfo.GameFunctionInfo,NetScriptFramework.GameInfo.GameFunctionInfo)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GetFunctionInfo(System.IntPtr,System.Boolean)">
            <summary>
            Gets the function information.
            </summary>
            <param name="address">The address.</param>
            <param name="withBaseOffset">Does the address include base offset of module?</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GetFunctionInfo(System.UInt64)">
            <summary>
            Gets the function information.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GetGlobalInfo(System.UInt64)">
            <summary>
            Gets the global information.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GetTypeInfo(System.UInt64)">
            <summary>
            Gets the type information.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GetTypeInstanceInfos(System.UInt32)">
            <summary>
            Gets the type instance infos.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.GameInfo.EmptyTypeInstanceInfos">
            <summary>
            The empty type instance infos.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GetAddressOf(System.UInt64,System.Int32,System.Int32,System.String)">
            <summary>
            Gets the address of the specified object by its version independent identifier. This will throw an exception if the address was not found.
            </summary>
            <param name="id">The identifier.</param>
            <param name="extraOffset">Extra offset to add to the address.</param>
            <param name="patternOffset">Offset of pattern at target address (id + extraOffset).</param>
            <param name="pattern">Must have this byte pattern at target location (id + extraOffset + patternOffset) (optional).</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.TryGetAddressOf(System.UInt64,System.Int32,System.Int32,System.String)">
            <summary>
            Tries to get the address of the specified object by its version independent identifier. This will return null if the address was not found.
            </summary>
            <param name="id">The identifier.</param>
            <param name="extraOffset">Extra offset to add to the address.</param>
            <param name="patternOffset">Offset of pattern at target address (id + extraOffset).</param>
            <param name="pattern">Must have this byte pattern at target location (optional).</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.GameInfo.AddTypeInfo(NetScriptFramework.GameInfo.GameTypeInfo)">
            <summary>
            Adds the type information.
            </summary>
            <param name="dt">The type info.</param>
        </member>
        <member name="M:NetScriptFramework.GameInfo.AddFunctionInfo(NetScriptFramework.GameInfo.GameFunctionInfo)">
            <summary>
            Adds the function information.
            </summary>
            <param name="fi">The function info.</param>
        </member>
        <member name="M:NetScriptFramework.GameInfo.AddGlobalInfo(NetScriptFramework.GameInfo.GameGlobalInfo)">
            <summary>
            Adds the function information.
            </summary>
            <param name="gb">The global info.</param>
        </member>
        <member name="M:NetScriptFramework.GameInfo.AddTypeInstanceInfos(System.UInt32,System.Collections.Generic.List{NetScriptFramework.GameInfo.GameTypeInstanceInfo})">
            <summary>
            Adds the type instance infos.
            </summary>
            <param name="id">The identifier.</param>
            <param name="ls">The list.</param>
        </member>
        <member name="M:NetScriptFramework.GameInfo.ReadFromFile(System.IO.FileInfo,System.Int32)">
            <summary>
            Reads from specified file. This will clear previous info.
            </summary>
            <param name="file">The file.</param>
            <param name="isLoadingAlias">Is loading alias already?</param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.WriteToFile(System.IO.FileInfo)">
            <summary>
            Writes to specified file. This will replace the file if it already exists.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:NetScriptFramework.GameInfo.Clear">
            <summary>
            Clears this instance from all data.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.StreamVersion">
            <summary>
            The stream version.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.ReadFromStream(System.IO.BinaryReader,System.IO.FileInfo,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="info">The file.</param>
            <param name="isLoadingAlias">Counter for loading alias file.</param>
            <exception cref="T:System.IO.InvalidDataException">Version of object is not supported!</exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:NetScriptFramework.GameInfo.GameTypeInstanceInfo">
            <summary>
            Information about an instance of a type.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeInstanceInfo.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},NetScriptFramework.GameInfo.GameTypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameTypeInstanceInfo"/> class.
            </summary>
            <param name="begin">The begin.</param>
            <param name="end">The end.</param>
            <param name="info">The type information.</param>
        </member>
        <member name="F:NetScriptFramework.GameInfo.GameTypeInstanceInfo.BeginOffset">
            <summary>
            The begin offset. This may be null if unknown.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.GameTypeInstanceInfo.EndOffset">
            <summary>
            The end offset. This may be null if unknown.
            </summary>
        </member>
        <member name="F:NetScriptFramework.GameInfo.GameTypeInstanceInfo.Info">
            <summary>
            The information of the type from version library.
            </summary>
        </member>
        <member name="T:NetScriptFramework.GameInfo.GameTypeInfo">
            <summary>
            Debug info for a type.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameTypeInfo"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeInfo.#ctor(System.UInt64,System.UInt64,System.String,System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyList{NetScriptFramework.GameInfo.GameFieldInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameTypeInfo"/> class.
            </summary>
            <param name="guid">The unique id.</param>
            <param name="vtable">The vtable.</param>
            <param name="name">The name.</param>
            <param name="size">The size.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeInfo.Id">
            <summary>
            Gets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeInfo.VTable">
            <summary>
            The virtual function table address offset.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeInfo.Name">
            <summary>
            The name of type to display.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeInfo.Size">
            <summary>
            Gets the size of type. This is null if unknown.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeInfo.Fields">
            <summary>
            Gets or sets the known fields list. This may be null if unknown or missing.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeInfo.ReadFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="version">The version.</param>
            <exception cref="T:System.IO.InvalidDataException">Version of object is not supported!</exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeInfo.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:NetScriptFramework.GameInfo.GameFieldInfo">
            <summary>
            Debug info for a field of a type.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFieldInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameFieldInfo"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFieldInfo.#ctor(System.UInt32,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameFieldInfo"/> class.
            </summary>
            <param name="fieldId">The field identifier.</param>
            <param name="begin">The begin.</param>
            <param name="shortname">The shortname.</param>
            <param name="typename">The typename.</param>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFieldInfo.FieldId">
            <summary>
            Gets the field identifier. This is not the same as global unique identifier. Fields in different types can have the same identifier.
            </summary>
            <value>
            The field identifier.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFieldInfo.Begin">
            <summary>
            Gets the begin offset in complete type. This is null if unknown.
            </summary>
            <value>
            The begin.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFieldInfo.ShortName">
            <summary>
            Gets the name of field. This is null if unknown.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFieldInfo.TypeName">
            <summary>
            Gets the value type name of the field. This is null if unknown.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFieldInfo.ReadFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="version">The version.</param>
            <exception cref="T:System.IO.InvalidDataException">Version of object is not supported!</exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFieldInfo.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:NetScriptFramework.GameInfo.GameGlobalInfo">
            <summary>
            Debug info for a global variable.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameGlobalInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameGlobalInfo"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameGlobalInfo.#ctor(System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameGlobalInfo"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="begin">The begin.</param>
            <param name="shortname">The shortname.</param>
            <param name="typename">The typename.</param>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameGlobalInfo.Id">
            <summary>
            The identifier of the gobal variable. This is version independent.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameGlobalInfo.Begin">
            <summary>
            The begin offset.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameGlobalInfo.ShortName">
            <summary>
            The short name of function.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameGlobalInfo.TypeName">
            <summary>
            Gets or sets the value type name of the global variable.
            </summary>
            <value>
            The name of the type.
            </value>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameGlobalInfo.ReadFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="version">The version.</param>
            <exception cref="T:System.IO.InvalidDataException">Version of object is not supported!</exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameGlobalInfo.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:NetScriptFramework.GameInfo.GameFunctionInfo">
            <summary>
            Debug info for a function.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFunctionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameFunctionInfo"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFunctionInfo.#ctor(System.UInt64,System.UInt64,System.UInt64,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameFunctionInfo" /> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="begin">The begin.</param>
            <param name="end">The end.</param>
            <param name="shortname">The shortname.</param>
            <param name="fullname">The fullname.</param>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFunctionInfo.Id">
            <summary>
            The identifier of the function. This is version independent.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFunctionInfo.Begin">
            <summary>
            The begin offset.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFunctionInfo.End">
            <summary>
            The end offset.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFunctionInfo.ShortName">
            <summary>
            The short name of function.
            </summary>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameFunctionInfo.FullName">
            <summary>
            The full name of function.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFunctionInfo.GetName(System.Boolean)">
            <summary>
            Gets the name.
            </summary>
            <param name="includeOffset">Include the offset of function?</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFunctionInfo.ReadFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="version">The version.</param>
            <exception cref="T:System.IO.InvalidDataException">Version of object is not supported!</exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameFunctionInfo.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:NetScriptFramework.GameInfo.GameTypeRegistration">
            <summary>
            The game type registration.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeRegistration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameTypeRegistration"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeRegistration.#ctor(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.GameInfo.GameTypeRegistration"/> class.
            </summary>
            <param name="interfaceId">The interface identifier.</param>
            <param name="implementationId">The implementation identifier.</param>
            <param name="vtableOffset">The vtable offset.</param>
            <param name="offsetInType">Type of the offset in.</param>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeRegistration.InterfaceId">
            <summary>
            Gets the interface identifier.
            </summary>
            <value>
            The interface identifier.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeRegistration.ImplementationId">
            <summary>
            Gets the implementation identifier.
            </summary>
            <value>
            The implementation identifier.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeRegistration.VTableOffset">
            <summary>
            Gets the virtual function table offset. This is negative if not available.
            </summary>
            <value>
            The v table offset.
            </value>
        </member>
        <member name="P:NetScriptFramework.GameInfo.GameTypeRegistration.OffsetInType">
            <summary>
            Gets the offset in complete type.
            </summary>
            <value>
            The type of the offset in.
            </value>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeRegistration.ReadFromStream(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="version">The version.</param>
            <exception cref="T:System.IO.InvalidDataException">Version of object is not supported!</exception>
        </member>
        <member name="M:NetScriptFramework.GameInfo.GameTypeRegistration.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes to stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:NetScriptFramework.EventRegistration">
            <summary>
            Contains information about a single event registration.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.Guid">
            <summary>
            The unique identifier of registration.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.Handler">
            <summary>
            The handler method.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.Priority">
            <summary>
            The priority of method.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.Flags">
            <summary>
            The options for registration.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.TotalCount">
            <summary>
            The total count to run this before automatically removing.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.CurrentCount">
            <summary>
            The current count.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.PluginKey">
            <summary>
            The plugin that installed the event.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistration.PluginVer">
            <summary>
            The plugin version that installed the event.
            </summary>
        </member>
        <member name="T:NetScriptFramework.EventRegistrationFlags">
            <summary>
            Options for an event registration.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistrationFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventRegistrationFlags.Distinct">
            <summary>
            Skip adding handler to invocation list if it already exists there.
            </summary>
        </member>
        <member name="T:NetScriptFramework.EventBase">
            <summary>
            The base class for accessing events.
            </summary>
        </member>
        <member name="M:NetScriptFramework.EventBase.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.EventBase"/> class.
            </summary>
            <param name="key">Unique key of event.</param>
            <param name="delegateType">Type of the delegate.</param>
        </member>
        <member name="F:NetScriptFramework.EventBase.Key">
            <summary>
            The key of event. This is the name of field or property usually.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventBase.DelegateType">
            <summary>
            The delegate type, used for loading.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventBase.Locker">
            <summary>
            The locker for thread safety.
            </summary>
        </member>
        <member name="M:NetScriptFramework.EventBase._GetHandler">
            <summary>
            Gets the handler. This will trigger a recalculation if it's needed. Returns null if no handlers are registered, otherwise
            may return a delegate or multi-cast delegate.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.EventBase.Handler">
            <summary>
            The current handler.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventBase.Registrations">
            <summary>
            The registrations.
            </summary>
        </member>
        <member name="M:NetScriptFramework.EventBase._ReduceCounts(System.Int32)">
            <summary>
            Reduce counts of registrations.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:NetScriptFramework.EventBase._Register(System.Delegate,System.Int32,System.Int32,NetScriptFramework.EventRegistrationFlags,System.String,System.Int32)">
            <summary>
            Register a new event handler.
            </summary>
            <param name="handler">The handler.</param>
            <param name="priority">The priority.</param>
            <param name="totalCount">The total count.</param>
            <param name="flags">The flags.</param>
            <param name="fromPluginKey">The plugin.</param>
            <param name="fromPluginVersion">The plugin version.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.EventBase._Register(NetScriptFramework.EventRegistration)">
            <summary>
            Register a new event handler.
            </summary>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:NetScriptFramework.EventBase._Unregister(System.Int64)">
            <summary>
            Unregister an event handler by its unique identifier.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.EventBase._UnregisterByIndex(System.Int32)">
            <summary>
            Unregister an event handler by its index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:NetScriptFramework.EventBase._Recalculate">
            <summary>
            Forces a recalculation of the event handler delegate.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Event`1">
            <summary>
            Implement event handler.
            </summary>
            <typeparam name="T">Type of event arguments.</typeparam>
        </member>
        <member name="M:NetScriptFramework.Event`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Event`1"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Event`1.Register(NetScriptFramework.Event{`0}.EventHandler,System.Int32,System.Int32,NetScriptFramework.EventRegistrationFlags)">
            <summary>
            Registers the specified handler. Returns handle to registration which can be used in Unregister method.
            </summary>
            <param name="handler">The handler function. This can be null if only suppression is required.</param>
            <param name="priority">The priority where higher priority gets called last.</param>
            <param name="count">The count. Set zero or negative for infinite, otherwise the handler is called this many times before automatically removed.</param>
            <param name="flags">The flags of registration.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Event`1.Unregister(System.Int64)">
            <summary>
            Unregisters the specified event handler.
            </summary>
            <param name="guid">The unique identifier of registration.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Event`1.Raise(System.Func{`0})">
            <summary>
            Raises the event with specified argument initializer. This initialize is only called if event has handlers registered.
            Returns the arguments after raising event, if no handlers were registered then null is returned.
            </summary>
            <param name="initArgs">The initialize arguments function.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Event`1.EventHandler">
            <summary>
            The event handler delegate.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:NetScriptFramework.HookedEventArgs">
            <summary>
            Base event arguments for hooked event.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:NetScriptFramework.HookedEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="T:NetScriptFramework.EventHookParameters`1">
            <summary>
            One hooked event registration parameters.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetScriptFramework.EventHookParameters`1.#ctor(System.IntPtr,System.Int32,System.Int32,System.String,System.Func{NetScriptFramework.CPURegisters,`0},System.Action{NetScriptFramework.CPURegisters,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.EventHookParameters`1"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="replaceLength">Length of the replace.</param>
            <param name="includeLength">Length of the include.</param>
            <param name="pattern">The expected pattern at location.</param>
            <param name="argFunc">The argument function.</param>
            <param name="afterFunc">The after function.</param>
        </member>
        <member name="P:NetScriptFramework.EventHookParameters`1.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:NetScriptFramework.EventHookParameters`1.ReplaceLength">
            <summary>
            Gets or sets the length of the replaced code.
            </summary>
            <value>
            The length of the replace.
            </value>
        </member>
        <member name="P:NetScriptFramework.EventHookParameters`1.IncludeLength">
            <summary>
            Gets or sets the length of the included code.
            </summary>
            <value>
            The length of the include.
            </value>
        </member>
        <member name="P:NetScriptFramework.EventHookParameters`1.Pattern">
            <summary>
            Gets the pattern.
            </summary>
            <value>
            The pattern.
            </value>
        </member>
        <member name="P:NetScriptFramework.EventHookParameters`1.ArgFunc">
            <summary>
            Gets or sets the argument function.
            </summary>
            <value>
            The argument function.
            </value>
        </member>
        <member name="P:NetScriptFramework.EventHookParameters`1.AfterFunc">
            <summary>
            Gets or sets the after function.
            </summary>
            <value>
            The after function.
            </value>
        </member>
        <member name="T:NetScriptFramework.EventHookFlags">
            <summary>
            Options for event hook.
            </summary>
        </member>
        <member name="T:NetScriptFramework.EventHook`1">
            <summary>
            Implement event handler that is also a code hook.
            </summary>
            <typeparam name="T">Type of event arguments.</typeparam>
        </member>
        <member name="M:NetScriptFramework.EventHook`1.#ctor(NetScriptFramework.EventHookFlags,System.String,NetScriptFramework.EventHookParameters{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.EventHook`1" /> class.
            </summary>
            <param name="flags">Options.</param>
            <param name="key">The key.</param>
            <param name="args">The arguments.</param>
            <exception cref="T:System.ArgumentNullException">argFunc</exception>
        </member>
        <member name="F:NetScriptFramework.EventHook`1.Arguments">
            <summary>
            The arguments.
            </summary>
        </member>
        <member name="F:NetScriptFramework.EventHook`1.HookFlags">
            <summary>
            The hook flags.
            </summary>
        </member>
        <member name="M:NetScriptFramework.EventHook`1.EventHook_Action(NetScriptFramework.CPURegisters,System.Int32)">
            <summary>
            The action to run in the hook, this will invoke the event.
            </summary>
            <param name="ctx">The context of action.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:NetScriptFramework.EventHook`1.Raise(System.Func{`0})">
            <summary>
            Raises the event with specified argument initializer. This initialize is only called if event has handlers registered.
            Returns the arguments after raising event, if no handlers were registered then null is returned.
            </summary>
            <param name="initArgs">The initialize arguments function.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Manually invoking hooked event is not allowed!</exception>
        </member>
        <member name="T:NetScriptFramework.Game">
            <summary>
            Contains header information about current game.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Game.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Game"/> class.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Game.ShortName">
            <summary>
            Gets the short name of current game. For example "Skyrim".
            </summary>
            <value>
            The short name.
            </value>
        </member>
        <member name="P:NetScriptFramework.Game.FullName">
            <summary>
            Gets the full name of current game. For example "The Elder Scrolls V: Skyrim"
            </summary>
            <value>
            The full name.
            </value>
        </member>
        <member name="P:NetScriptFramework.Game.ExecutableName">
            <summary>
            Gets the name of the executable of current game including file extension. For example "TESV.exe".
            </summary>
            <value>
            The name of the executable.
            </value>
        </member>
        <member name="P:NetScriptFramework.Game.ModuleName">
            <summary>
            Gets the name of the target module. This is usually equal to ExecutableName but sometimes we may want to target a DLL inside the process instead in which case they would be different.
            </summary>
            <value>
            The name of the module.
            </value>
        </member>
        <member name="P:NetScriptFramework.Game.VersionLibraryHash">
            <summary>
            Gets the version library hash that is required to be loaded.
            </summary>
            <value>
            The version library hash.
            </value>
        </member>
        <member name="P:NetScriptFramework.Game.GameVersion">
            <summary>
            Gets the version of current game. It is read from the executable. This is a list of four integers always.
            The first integer in the list is the most significant version number and last is the least significant.
            For example { 1, 9, 32, 0 }
            </summary>
            <value>
            The version of game.
            </value>
        </member>
        <member name="P:NetScriptFramework.Game.LibraryVersion">
            <summary>
            Gets the library version. This is separate from game's version. Multiple library versions may exist for the same
            version of the game.
            </summary>
            <value>
            The library version.
            </value>
        </member>
        <member name="P:NetScriptFramework.Game.IsValidVersion">
            <summary>
            Gets a value indicating whether currently loaded game version is a valid version supported by this library.
            This is only used during game header initialization. If it returns false the game will abort and display an error.
            </summary>
            <value>
            <c>true</c> if this instance is valid version; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NetScriptFramework.Game.Initialize">
            <summary>
            Initializes the game library.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Game.GetImplementationById(System.UInt64)">
            <summary>
            Gets the implementation by identifier.
            </summary>
            <param name="vid">The vid.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Game.GetInterfaceById(System.UInt64)">
            <summary>
            Gets the interface by identifier.
            </summary>
            <param name="vid">The vid.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Game.RegisterInterfaceType(System.UInt32,System.Type,System.UInt64)">
            <summary>
            Registers the interface type.
            </summary>
            <param name="id">The identifier.</param>
            <param name="type">The type.</param>
            <param name="vid">The unique identifier of type.</param>
        </member>
        <member name="M:NetScriptFramework.Game.RegisterImplementationType(System.UInt32,System.Type,System.UInt64)">
            <summary>
            Registers the implementation type.
            </summary>
            <param name="id">The identifier.</param>
            <param name="type">The type.</param>
            <param name="vid">The unique identifier of type.</param>
        </member>
        <member name="F:NetScriptFramework.Game.Types">
            <summary>
            The types cache.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Game.GetModuleVersion(System.Diagnostics.FileVersionInfo)">
            <summary>
            Gets the module version.
            </summary>
            <param name="ver">The version.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Game.ParseVersion(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Parses the version.
            </summary>
            <param name="str">The string.</param>
            <param name="a">a.</param>
            <param name="b">b.</param>
            <param name="c">c.</param>
            <param name="d">d.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Game.IsBadVersion(System.Int32[])">
            <summary>
            Determines whether the version is bad or missing possibly.
            </summary>
            <param name="r">The version.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Game.RegisterType(System.IntPtr,System.Type,System.Type,System.Nullable{System.IntPtr},System.Int32)">
            <summary>
            Registers the type to library. This must be done for all types.
            </summary>
            <param name="module">The module base address where this type is in. If zero then it's current process main module.</param>
            <param name="interfaceType">Type of the interface.</param>
            <param name="implementationType">Type of the implementation.</param>
            <param name="vtable">The virtual function table address.</param>
            <param name="offsetInFullType">The offset of this vtable in full type.</param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="T:NetScriptFramework.TypeCache">
            <summary>
            The registered type cache for library.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeCache.TypesByNoVTable">
            <summary>
            The registered types by interface.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeCache.TypesByVTable">
            <summary>
            The types by virtual function table address.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeCache.TypesWithVTable">
            <summary>
            The types with virtual function table.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeCache.TypesByImplementation">
            <summary>
            The types by implementation.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeCache.All">
            <summary>
            All types.
            </summary>
        </member>
        <member name="T:NetScriptFramework.TypeDescriptor">
            <summary>
            Implement registered type info.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeDescriptor.InterfaceType">
            <summary>
            The interface type.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeDescriptor.ImplementationType">
            <summary>
            The implementation (internal) type.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeDescriptor.VTable">
            <summary>
            The virtual function table address.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeDescriptor.OffsetInFullType">
            <summary>
            The offset in full type.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeDescriptor.Module">
            <summary>
            The module base address where this type is in.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TypeDescriptor.Creator">
            <summary>
            The constructor for implementation.
            </summary>
        </member>
        <member name="T:NetScriptFramework.TypeDescriptor.CreatorDelegate">
            <summary>
            The delegate for constructing the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.IValueGenericArgument">
            <summary>
            Base interface for a generic argument that is a constant value.
            </summary>
        </member>
        <member name="P:NetScriptFramework.IValueGenericArgument.BaseValue">
            <summary>
            Gets the base value.
            </summary>
            <value>
            The base value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IBoolValueGenericArgument">
            <summary>
            Interface for a constant boolean value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IBoolValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.ICharValueGenericArgument">
            <summary>
            Interface for a constant character value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.ICharValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IInt8ValueGenericArgument">
            <summary>
            Interface for a constant int8 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IInt8ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IUInt8ValueGenericArgument">
            <summary>
            Interface for a constant uint8 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IUInt8ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IInt16ValueGenericArgument">
            <summary>
            Interface for a constant int16 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IInt16ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IUInt16ValueGenericArgument">
            <summary>
            Interface for a constant uint16 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IUInt16ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IInt32ValueGenericArgument">
            <summary>
            Interface for a constant int32 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IInt32ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IUInt32ValueGenericArgument">
            <summary>
            Interface for a constant uint32 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IUInt32ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IInt64ValueGenericArgument">
            <summary>
            Interface for a constant int64 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IInt64ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IUInt64ValueGenericArgument">
            <summary>
            Interface for a constant uint64 value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IUInt64ValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IFloatValueGenericArgument">
            <summary>
            Interface for a constant float value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IFloatValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IDoubleValueGenericArgument">
            <summary>
            Interface for a constant double value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IDoubleValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IIntPtrValueGenericArgument">
            <summary>
            Interface for a constant pointer value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="P:NetScriptFramework.IIntPtrValueGenericArgument.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:NetScriptFramework.IUnknownValueGenericArgument">
            <summary>
            Interface for an unknown value generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IValueGenericArgument" />
        </member>
        <member name="T:NetScriptFramework.CachedVid">
            <summary>
            This is a helper class for caching an address value.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CachedVid.#ctor(System.Nullable{System.IntPtr})">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.CachedVid"/> struct.
            </summary>
            <param name="_arg">The argument.</param>
        </member>
        <member name="F:NetScriptFramework.CachedVid._result">
            <summary>
            The cached result.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CachedVid.Value">
            <summary>
            Gets the value. This will throw an exception if the value is not initialized correctly!
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.NotSupportedException">Trying to use an address that failed to initialize! This could mean the code being executed is not supported in current version of application.</exception>
        </member>
        <member name="M:NetScriptFramework.CachedVid.TryGetValue">
            <summary>
            Tries to get the value. This will not throw an exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CachedVid.Initialize(System.UInt64,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes the specified address. This will throw an exception if failed to find.
            </summary>
            <param name="id">The identifier.</param>
            <param name="extraOffset">The extra offset.</param>
            <param name="patternOffset">The pattern offset.</param>
            <param name="pattern">The pattern.</param>
            <exception cref="T:System.ArgumentException">Unable to initialize address with unique ID of  + id + !</exception>
        </member>
        <member name="M:NetScriptFramework.CachedVid.TryInitialize(System.UInt64,System.Int32,System.Int32,System.String)">
            <summary>
            Tries to initialize the specified address. This will return false if failed to find.
            </summary>
            <param name="id">The identifier.</param>
            <param name="extraOffset">The extra offset.</param>
            <param name="patternOffset">The pattern offset.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.CachedFid">
            <summary>
            Helper class for caching field offsets.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CachedFid.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.CachedFid"/> struct.
            </summary>
            <param name="_arg">The argument.</param>
        </member>
        <member name="F:NetScriptFramework.CachedFid._result">
            <summary>
            The cached result.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CachedFid.Value">
            <summary>
            Gets the value. This will throw an exception if the value is not initialized correctly!
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.NotSupportedException">Trying to use an address that failed to initialize! This could mean the code being executed is not supported in current version of application.</exception>
        </member>
        <member name="M:NetScriptFramework.CachedFid.TryGetValue">
            <summary>
            Tries to get the value. This will not throw an exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CachedFid.Initialize(System.UInt64,System.UInt32)">
            <summary>
            Initializes the specified field offset. This will throw an exception if failed to find.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="fieldId">The field identifier.</param>
            <exception cref="T:System.ArgumentException">Unable to initialize address with unique ID of  + id + !</exception>
        </member>
        <member name="M:NetScriptFramework.CachedFid.TryInitialize(System.UInt64,System.UInt32)">
            <summary>
            Tries to initializes the specified field offset.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="fieldId">The field identifier.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.CachedLibValue">
            <summary>
            A cached library value.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CachedLibValue.#ctor(System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.CachedLibValue"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:NetScriptFramework.CachedLibValue._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CachedLibValue.Value">
            <summary>
            Gets the value. This may throw an exception if the value is not valid.
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.NotSupportedException">Version specific value was not found in version library! This could mean the function or field being accessed is not supported in current version of executable!</exception>
        </member>
        <member name="P:NetScriptFramework.CachedLibValue.ValueSafe">
            <summary>
            Gets the value safely. This will not throw any exception.
            </summary>
            <value>
            The value safe.
            </value>
        </member>
        <member name="T:NetScriptFramework.Tools._Internal.HookBase">
            <summary>
            Helper to create hooks.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBase.WriteConvertedCode(System.Byte[],System.IO.BinaryWriter,System.IntPtr,System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int64,System.Int64}})">
            <summary>
            Writes the converted byte code to stream.
            </summary>
            <param name="code">The code.</param>
            <param name="ms">The ms.</param>
            <param name="hookSourceAddr">The hook source addr.</param>
            <param name="offset">The offset.</param>
            <param name="tempBack">The temporary back.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBase.Include(System.Byte[],System.IntPtr,System.IntPtr)">
            <summary>
            Includes the specified code when entering CLR and invoking action.
            </summary>
            <param name="code">The code.</param>
            <param name="hookSourceAddr">The source address where the included code begins.</param>
            <param name="target">Target where we jump after.</param>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Tools._Internal.HookBase.EmptyInclude">
            <summary>
            The empty code cave.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBase.BuildHook(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Boolean,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Builds the hook.
            </summary>
            <param name="hookSourceBase">The hook source base.</param>
            <param name="hookReplaceLength">Length of the hook replace.</param>
            <param name="hookIncludeBase">The hook include base.</param>
            <param name="hookIncludeLength">Length of the hook include.</param>
            <param name="isLongJump">Is this long jump or short.</param>
            <param name="target">The target.</param>
            <param name="include1">The include1.</param>
            <param name="include2">The include2.</param>
        </member>
        <member name="T:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook">
            <summary>
            Contains information about a near jump setup.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook.#ctor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook"/> class.
            </summary>
            <param name="moduleBase">The module base.</param>
            <param name="beginAddress">The begin address.</param>
            <param name="endAddress">The end address.</param>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook.ModuleBase">
            <summary>
            The module base where this hook is in.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook.BeginAddress">
            <summary>
            The begin address that can reach this jump.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook.EndAddress">
            <summary>
            The end address that can reach this jump.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook.Target">
            <summary>
            The target of what we must rel-call to use this jump.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBase.ModuleNearJumpHook.Contains(System.IntPtr)">
            <summary>
            Determines whether this setup contains the specified address.
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:NetScriptFramework.Tools._Internal.HookBefore">
            <summary>
            Helper class for hooking before assembly code.
            </summary>
            <seealso cref="T:NetScriptFramework.Tools._Internal.HookBase" />
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBefore.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NetScriptFramework.Tools._Internal.HookBefore"/> class from being created.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBefore.BuildHook(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Boolean,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Builds the hook.
            </summary>
            <param name="hookSourceBase">The hook source base.</param>
            <param name="hookReplaceLength">Length of the hook replace.</param>
            <param name="hookIncludeBase">The hook include base.</param>
            <param name="hookIncludeLength">Length of the hook include.</param>
            <param name="isLongJump">Is this long jump or short.</param>
            <param name="target">The target.</param>
            <param name="include1">The include1.</param>
            <param name="include2">The include2.</param>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBefore.CompareBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compares the bytes.
            </summary>
            <param name="data">The data.</param>
            <param name="pattern">The pattern.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBefore.GetNearHookAddress(System.IntPtr)">
            <summary>
            Gets the near hook address.
            </summary>
            <param name="hookAddress">The hook address (source).</param>
            <returns></returns>
            <exception cref="T:NetScriptFramework.MemoryAccessException"></exception>
            <exception cref="T:System.InvalidOperationException">
            Not a valid code page!
            or
            Not a valid module!
            or
            Code section was not found!
            or
            Unhandled error occurred ( + result + )!
            or
            Didn't find a code cave for near jump setup!
            </exception>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBefore.GetFarHookAddress(System.IntPtr)">
            <summary>
            Gets the far hook address.
            </summary>
            <param name="hookAddress">The hook address (source).</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBefore._Address_FarJumpSetup">
            <summary>
            The address for when we land from a far-jump.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBefore._Address_EnterHook">
            <summary>
            The address for actually entering the hook.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBefore._Address_PostInclude">
            <summary>
            The address for what comes after included code has run.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBefore._Address_NearJumpSetup">
            <summary>
            The addresses for near jump setups.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBefore.Instance">
            <summary>
            The instance of this type of hook setup.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools._Internal.HookAfter">
            <summary>
            Helper class for hooking after assembly code.
            </summary>
            <seealso cref="T:NetScriptFramework.Tools._Internal.HookBase" />
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookAfter.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NetScriptFramework.Tools._Internal.HookAfter"/> class from being created.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookAfter.BuildHook(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Boolean,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Builds the hook.
            </summary>
            <param name="hookSourceBase">The hook source base.</param>
            <param name="hookReplaceLength">Length of the hook replace.</param>
            <param name="hookIncludeBase">The hook include base.</param>
            <param name="hookIncludeLength">Length of the hook include.</param>
            <param name="isLongJump">Is this long jump or short.</param>
            <param name="target">The target.</param>
            <param name="include1">The include1.</param>
            <param name="include2">The include2.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookAfter.CompareBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compares the bytes.
            </summary>
            <param name="data">The data.</param>
            <param name="pattern">The pattern.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookAfter.GetNearHookAddress(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the near hook address.
            </summary>
            <param name="hookAddress">The hook address (source).</param>
            <param name="targetAddress">The target address.</param>
            <returns></returns>
            <exception cref="T:NetScriptFramework.MemoryAccessException"></exception>
            <exception cref="T:System.InvalidOperationException">Not a valid code page!
            or
            Not a valid module!
            or
            Code section was not found!
            or
            Unhandled error occurred ( + result + )!
            or
            Didn't find a code cave for near jump setup!</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:NetScriptFramework.MemoryAccessException"></exception>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookAfter.GetFarHookAddress(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the far hook address.
            </summary>
            <param name="hookAddress">The hook address (source).</param>
            <param name="targetAddress">The target address.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookAfter._Address_PostInclude">
            <summary>
            The address for what comes after included code has run.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookAfter.Instance">
            <summary>
            The instance of this type of hook setup.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools._Internal.HookBoth">
            <summary>
            Helper class for hooking both before and after assembly code.
            </summary>
            <seealso cref="T:NetScriptFramework.Tools._Internal.HookBase" />
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBoth.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NetScriptFramework.Tools._Internal.HookBoth"/> class from being created.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBoth.BuildHook(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Boolean,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Builds the hook.
            </summary>
            <param name="hookSourceBase">The hook source base.</param>
            <param name="hookReplaceLength">Length of the hook replace.</param>
            <param name="hookIncludeBase">The hook include base.</param>
            <param name="hookIncludeLength">Length of the hook include.</param>
            <param name="isLongJump">Is this long jump or short.</param>
            <param name="target">The target.</param>
            <param name="include1">The include1.</param>
            <param name="include2">The include2.</param>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBoth.CompareBytes(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compares the bytes.
            </summary>
            <param name="data">The data.</param>
            <param name="pattern">The pattern.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBoth.GetNearHookAddress(System.IntPtr)">
            <summary>
            Gets the near hook address.
            </summary>
            <param name="hookAddress">The hook address (source).</param>
            <returns></returns>
            <exception cref="T:NetScriptFramework.MemoryAccessException"></exception>
            <exception cref="T:System.InvalidOperationException">
            Not a valid code page!
            or
            Not a valid module!
            or
            Code section was not found!
            or
            Unhandled error occurred ( + result + )!
            or
            Didn't find a code cave for near jump setup!
            </exception>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.HookBoth.GetFarHookAddress(System.IntPtr)">
            <summary>
            Gets the far hook address.
            </summary>
            <param name="hookAddress">The hook address (source).</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBoth._Address_FarJumpSetup">
            <summary>
            The address for when we land from a far-jump.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBoth._Address_EnterHook">
            <summary>
            The address for actually entering the hook.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBoth._Address_PostInclude">
            <summary>
            The address for what comes after included code has run.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBoth._Address_PostInclude2">
            <summary>
            The address for what comes after second code has run.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBoth._Address_NearJumpSetup">
            <summary>
            The addresses for near jump setups.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools._Internal.HookBoth.Instance">
            <summary>
            The instance of this type of hook setup.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.RTHandler.SuspendAllThreadsInCurrentProcess">
            <summary>
            Suspends all threads in current process except the executing thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.RTHandler.ResumeAllThreadsInCurrentProcess">
            <summary>
            Resumes all threads in current process except the executing thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.RTHandler.SuspendAllThreadsInCurrentProcess(System.Int32[])">
            <summary>
            Suspends all threads in current process except the executing thread.
            </summary>
            <param name="notThese">Not these.</param>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.RTHandler.ResumeAllThreadsInCurrentProcess(System.Int32[])">
            <summary>
            Resumes all threads in current process except the executing thread.
            </summary>
            <param name="notThese">Don't resume these threads.</param>
        </member>
        <member name="M:NetScriptFramework.Tools._Internal.RTHandler.ExitProcess(System.Boolean)">
            <summary>
            Exits the process.
            </summary>
            <param name="graceful">Is this graceful exit or should we kill.</param>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigEntry">
            <summary>
            One entry in configuration settings.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.#ctor(System.String,NetScriptFramework.Tools.Value,System.String,System.String,NetScriptFramework.Tools.ConfigEntryFlags)">
            <summary>
            Create a new entry.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntry.Keyword">
            <summary>
            Keyword of entry.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntry.Name">
            <summary>
            Name of entry.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntry.Description">
            <summary>
            Description of entry.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntry.Flags">
            <summary>
            Options for configuration entry.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigEntry.DefaultValue">
            <summary>
            Get default value of setting.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigEntry.CurrentValue">
            <summary>
            Get current value of setting.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.AddValidRange(NetScriptFramework.Tools.Value,NetScriptFramework.Tools.Value)">
            <summary>
            Add a custom valid range of values. If value is not in valid value list and not in valid range list then it is not
            allowed to set this value. This method is not valid for strings and will throw an exception. If no valid values
            are not added then this check is ignored.
            </summary>
            <param name="min">Minimum allowed value.</param>
            <param name="max">Maximum allowed value.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.AddValidValue(NetScriptFramework.Tools.Value)">
            <summary>
            Add a custom valid value. If value is not in valid value list and not in valid range list then it is not
            allowed to set this value. If no valid values are not added then this check is ignored.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.TrySetValue(System.String)">
            <summary>
            Try to set value of this entry.
            </summary>
            <param name="text">Value in string form.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.TryGetValue">
            <summary>
            Try to get value of this entry in string form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.GenerateCommentBlock">
            <summary>
            Generate full comment block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.GenerateSetting">
            <summary>
            Generate setting line.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigEntry.IsModified">
            <summary>
            Get or set whether entry has been modified since last save.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.WriteToFile(System.IO.StreamWriter)">
            <summary>
            Write this entry to file.
            </summary>
            <param name="writer">File stream.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.ShouldWriteToFile">
            <summary>
            Check if entry should be written to file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.Validate(NetScriptFramework.Tools.Value)">
            <summary>
            Try to validate value.
            </summary>
            <param name="value">Value to validate.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.Wrap(System.String,System.Int32,System.Int32)">
            <summary>
            Wrap text into multiple lines if it's longer than specified.
            </summary>
            <param name="text">Text to wrap.</param>
            <param name="length">Maximum length of the new lines.</param>
            <param name="indent">Indent length. This will add this many spaces to any line after the first.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntry._wrapChars">
            <summary>
            Wrap characters.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.WriteCommentBlock(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Write a comment block line.
            </summary>
            <param name="text">Text to write.</param>
            <param name="lines">Lines.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.GetLineLength">
            <summary>
            Get comment block max line length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigEntry.ToString">
            <summary>
            Convert entry to string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigEntryFlags">
            <summary>
            Options for one configuration entry.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntryFlags.Custom">
            <summary>
            This is a custom setting from user, not registered.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntryFlags.Hidden">
            <summary>
            Don't write to file if setting is equal to default value.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntryFlags.NoSave">
            <summary>
            Don't write to file ever. This means setting is reset every time.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntryFlags.PreferHex">
            <summary>
            Prefer to write out this value in hexadecimal notation when possible.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntryFlags.NoNewLineBefore">
            <summary>
            Skip writing a new line before this entry if the comments are empty.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigEntryFlags.VeryShortComment">
            <summary>
            Make the comment block very small.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigFile">
            <summary>
            Handles reading and writing configuration settings from file.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.#ctor(System.String)">
            <summary>
            Create a new configuration file.
            </summary>
            <param name="keyword">Keyword of configuration. This should usually be the name of your plugin's DLL without the extension.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Tools.ConfigFile"/> class.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigFile.Keyword">
            <summary>
            Keyword of file.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigFile.Prefix">
            <summary>
            Get or set prefix of file manually.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigFile.Suffix">
            <summary>
            Get or set suffix of file manually.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigFile.Path">
            <summary>
            Get or set path of file manually.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigFile.AutoSave">
            <summary>
            Get or set whether configuration file should be saved automatically when it's modified during runtime.
            Default is true.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigFile.AutoCreate">
            <summary>
            Get or set whether configuration file should be created automatically if it doesn't exist.
            Default is true.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.LoadFrom``1(``0,System.String,System.Boolean)">
            <summary>
            Loads configuration from file into the specified object. Returns true if file was loaded and false if file was not loaded (but may have been created now if the argument for it was set).
            </summary>
            <typeparam name="T">Type of object to load into.</typeparam>
            <param name="obj">The object to load into.</param>
            <param name="keyword">The keyword of the configuration file.</param>
            <param name="createIfMissing">if set to <c>true</c> then create configuration file if missing or failed to load.</param>
            <exception cref="T:System.ArgumentNullException">obj</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.Load">
            <summary>
            (Re)load configuration from file. Settings are not reset if we didn't load.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.MarkAllAsModified">
            <summary>
            Mark all settings as modified. This will rewrite all comment blocks and settings to file.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.Save">
            <summary>
            Save all current settings to file. If file does not exist it will be created.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.Reset">
            <summary>
            Reset all settings to default.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigFile.IsLoadedFromFile">
            <summary>
            Check if settings were loaded from file, otherwise we are using default settings.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ConfigFile.IsModifiedSinceSave">
            <summary>
            Check if configuration has been modified since last saving.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.AddSetting(System.String,NetScriptFramework.Tools.Value,System.String,System.String,NetScriptFramework.Tools.ConfigEntryFlags)">
            <summary>
            Add setting to file. Entry is returned so you may add restricting values to it.
            </summary>
            <param name="keyword">Keyword of setting. This is used to fetch and set value.</param>
            <param name="value">Default value of setting.</param>
            <param name="name">Name of setting. Optional.</param>
            <param name="description">Description of setting. Optional.</param>
            <param name="flags">Options.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.GetValue(System.String)">
            <summary>
            Get value of a setting by keyword.
            </summary>
            <param name="keyword">Keyword of a setting.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.GetDefaultValue(System.String)">
            <summary>
            Get value of a setting by keyword.
            </summary>
            <param name="keyword">Keyword of a setting.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.SetValue(System.String,System.String)">
            <summary>
            Try to set value of a setting. If we could not set then we return false.
            </summary>
            <param name="keyword">Keyword of a setting.</param>
            <param name="value">Value to set.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.GetEntry(System.String)">
            <summary>
            Get entry by keyword.
            </summary>
            <param name="keyword">Keyword of entry.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile._addCustomSetting(NetScriptFramework.Tools.ConfigEntry)">
            <summary>
            Add a new custom user setting.
            </summary>
            <param name="e">Entry.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.GenerateFilePath">
            <summary>
            Generate file path with current settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.CheckFolderExists(System.Boolean)">
            <summary>
            Check if folder to file exists.
            </summary>
            <param name="allowCreate">Allow create if it doesn't exist.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigFile.ParseLine(System.String,System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry},System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry},System.Collections.Generic.List{System.String})">
            <summary>
            Parse one line of configuration file.
            </summary>
            <param name="line">Line to parse.</param>
            <param name="all">All entries.</param>
            <param name="custom">Custom entries.</param>
            <param name="loaded">Already loaded setting entries.</param>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigFileFlags">
            <summary>
            Options for configuration file.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigFileFlags.ManualSave">
            <summary>
            Don't automatically save file.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigFileFlags.ManualCreate">
            <summary>
            Don't automatically create file.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigLine">
            <summary>
            One line of configuration file. This is used internally to preserve manual changes to configuration file.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLine.#ctor">
            <summary>
            Create new line.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLine.Text">
            <summary>
            Text of line.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLine.Type">
            <summary>
            Type of line.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLine.Keyword">
            <summary>
            If this is a setting then the keyword of what is set will be here.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigLineTypes">
            <summary>
            All possible configuration file line types.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLineTypes.Ignored">
            <summary>
            Ignored line, but not comment. This can be empty line, spaces or other such things.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLineTypes.Comment">
            <summary>
            Commented line.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLineTypes.Setting">
            <summary>
            One configuration setting.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigLines">
            <summary>
            This class helps preserve manual changes to configuration files.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.#ctor">
            <summary>
            Create new lines collection.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.ParseLine(System.String,System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry},System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry},System.Collections.Generic.List{System.String},NetScriptFramework.Tools.ConfigFile)">
            <summary>
            Parse one line from file.
            </summary>
            <param name="line">Line as is.</param>
            <param name="all">All registered entries.</param>
            <param name="custom">Any new custom entries will be added here and later registered.</param>
            <param name="processed">Already processed setting keywords.</param>
            <param name="file">File that is processing.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.Modify(System.Collections.Generic.IEnumerable{NetScriptFramework.Tools.ConfigEntry},System.Boolean)">
            <summary>
            Modify lines of configuration files.
            </summary>
            <param name="modifiedEntries">Collection of modified entries.</param>
            <param name="force">Force modify even if nothing changed.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.WriteToFile(System.IO.StreamWriter)">
            <summary>
            Write all lines to file.
            </summary>
            <param name="writer">File stream.</param>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockTop">
            <summary>
            Comment block top line.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockBottom">
            <summary>
            Comment block bottom line.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockLeft">
            <summary>
            Comment block left (start of line).
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockRight">
            <summary>
            Comment block right (end of line).
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockTopMargin">
            <summary>
            How many lines to add between top of comment block and first line of text.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockBottomMargin">
            <summary>
            How many lines to add between bottom of comment block and last line of text.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockLeftMargin">
            <summary>
            How many spaces to add between left side of comment block and first letter.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.CommentBlockRightMargin">
            <summary>
            How many spaces to add between right side of comment block and last letter.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.Modify(NetScriptFramework.Tools.ConfigEntry,System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry},System.Boolean)">
            <summary>
            Modify one entry.
            </summary>
            <param name="entry">Entry to modify.</param>
            <param name="all">All, for reference.</param>
            <param name="force">Force modify.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.TryModifyCommentBlock(NetScriptFramework.Tools.ConfigEntry,System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry})">
            <summary>
            Try to modify comment block.
            </summary>
            <param name="entry">Entry to replace comment block on.</param>
            <param name="all">All, for reference.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.TryModifySetting(NetScriptFramework.Tools.ConfigEntry,System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry})">
            <summary>
            Try to modify setting.
            </summary>
            <param name="entry">Entry to modify.</param>
            <param name="all">All, for reference.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.AddNewSetting(NetScriptFramework.Tools.ConfigEntry,System.Collections.Generic.List{NetScriptFramework.Tools.ConfigEntry})">
            <summary>
            Add new setting to lines.
            </summary>
            <param name="entry">Entry to add.</param>
            <param name="all">All, for reference.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.AddNewSetting(System.String,System.String,System.Int32)">
            <summary>
            Add new setting to lines.
            </summary>
            <param name="line">Line as is.</param>
            <param name="keyword">Keyword of setting for line entry.</param>
            <param name="index">Index where to add. If negative then add to end.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.AddNewCommentBlock(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Insert a new comment block to lines.
            </summary>
            <param name="block">Block lines.</param>
            <param name="startIndex">Starting index. If negative then add to end.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.AddNewComment(System.String,System.Int32)">
            <summary>
            Add a new comment line.
            </summary>
            <param name="line">Line to add.</param>
            <param name="startIndex">Start index. If negative then add to end.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.AddEmptyLine(System.String,System.Int32)">
            <summary>
            Add empty line to file.
            </summary>
            <param name="line">Custom line. If null then create empty line.</param>
            <param name="startIndex">Start index. If negative then add to end.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.HasMoreBlock(System.Int32,System.Int32)">
            <summary>
            This is used to check if comment block is unambiguous.
            </summary>
            <param name="start">Start index.</param>
            <param name="end">End index (excluded).</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.FindStartOfComment(System.Int32,System.Int32)">
            <summary>
            Find start of comment block for specific setting. This returns line index where the comment block starts.
            If not found then negative value is returned.
            </summary>
            <param name="minIndex">Minimum index allowed to search.</param>
            <param name="endIndex">End index of comment block.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.FindEndOfComment(System.Int32,System.Int32)">
            <summary>
            Find end of comment block for specific setting. This returns line index where the comment block ends.
            The line index is included in the comment block. If not found then negative value is returned.
            </summary>
            <param name="minIndex">Minium index allowed to search.</param>
            <param name="settingIndex">Index of setting.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.FindSetting(System.String)">
            <summary>
            Find setting line. If not found then negative value is returned.
            </summary>
            <param name="keyword">Keyword to find for.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.FindPreviousSetting(System.Int32)">
            <summary>
            Find previous setting index of a keyword.
            </summary>
            <param name="settingIndex">Index of current setting.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigLines.Lines">
            <summary>
            All added lines.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigLines.MakeError(System.String[],System.Int32)">
            <summary>
            Make an error message.
            </summary>
            <param name="text">Text to set as error. This will be in comments.</param>
            <param name="index">Index of error, if negative then append to end, otherwise make that indexed line as error.
            This offsets all other lines.</param>
        </member>
        <member name="T:NetScriptFramework.Tools.ConfigValueAttribute">
            <summary>
            Attribute for a configuration value.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigValueAttribute.#ctor(System.String,System.String,System.String,NetScriptFramework.Tools.ConfigEntryFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Tools.ConfigValueAttribute"/> class.
            </summary>
            <param name="keyword">The keyword.</param>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="flags">Options for the value.</param>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigValueAttribute.Keyword">
            <summary>
            The keyword.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigValueAttribute.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigValueAttribute.Description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ConfigValueAttribute.Flags">
            <summary>
            The flags of entry.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigValueAttribute.ToValue(System.Type,System.Object)">
            <summary>
            Convert from base object to our value.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unhandled type in configuration class ( + type.Name + )!;type</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.ConfigValueAttribute.FromValue(System.Type,NetScriptFramework.Tools.Value)">
            <summary>
            Convert from our value to underlying object.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">
            </exception>
            <exception cref="T:System.ArgumentException">Unhandled type in configuration class ( + type.Name + )!;type</exception>
        </member>
        <member name="T:NetScriptFramework.Tools.Input">
            <summary>
            Input handler class. Use this to check if a key or button is pressed.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Input.IsPressed(NetScriptFramework.Tools.VirtualKeys)">
            <summary>
            Determines whether the specified key is pressed (currently down).
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Input.IsToggled(NetScriptFramework.Tools.VirtualKeys)">
            <summary>
            Determines whether the specified key is toggled on. This is used for example to check Caps Lock.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Input.GetPressed">
            <summary>
            Gets all the currently pressed keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Input.GetAsyncKeyState(System.Int32)">
            <summary>
            WinAPI function used to check if a key is pressed right now.
            </summary>
            <param name="vKey"></param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Input.GetKeyboardState(System.Byte[])">
            <summary>
            WinAPI function used to get all pressed keys.
            </summary>
            <param name="lpKeyState">Output is set here.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.VirtualKeys">
            <summary>
            Enumeration for virtual keys in WinAPI.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.LogFile">
            <summary>
            Implement helper class to write log file using default settings. Log file methods are thread-safe.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.#ctor(System.String,NetScriptFramework.Tools.LogFileFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Tools.LogFile"/> class.
            </summary>
            <param name="keyword">The keyword of log file. This should be the same as your plugin's DLL name without the extension.</param>
            <param name="flags">The flags for log file.</param>
            <exception cref="T:System.ArgumentNullException">keyword</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">keyword</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Tools.LogFile"/> class.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFile.Keyword">
            <summary>
            The keyword of log file.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFile.Flags">
            <summary>
            The options for this log file.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.LogFile.Prefix">
            <summary>
            Get or set prefix of file manually.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.LogFile.Suffix">
            <summary>
            Get or set suffix of file manually.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.LogFile.Path">
            <summary>
            Get or set path of file manually.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.Close">
            <summary>
            Closes this instance and the underlying file if it is open.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.Append(System.String)">
            <summary>
            Appends the specified text to log file without writing a newline at the end. This will re-open the file if it is not opened!
            </summary>
            <param name="text">The text to append.</param>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.Append(System.Exception)">
            <summary>
            Appends the specified exception information to log.
            </summary>
            <param name="e">The exception.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.GetExceptionText(System.Exception,System.Int32,System.String)">
            <summary>
            Gets the exception text lines.
            </summary>
            <param name="e">The exception.</param>
            <param name="wrap">Wrap exception to this length.</param>
            <param name="tab">The tab to use when multiple exceptions are involved.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.AppendLine(System.String)">
            <summary>
            Appends the specified text to log file and writes a newline at the end. This will re-open the file if it is not opened!
            </summary>
            <param name="text">The text to append.</param>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFile.Locker">
            <summary>
            The locker for log file.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.GenerateFilePath">
            <summary>
            Generate file path with current settings.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFile.file">
            <summary>
            The opened file.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFile.isNewLine">
            <summary>
            Is log currently at a new line?
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.OpenFile">
            <summary>
            Opens the file for writing.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.CloseFile">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.CloseAll">
            <summary>
            Closes all log files.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFile.All">
            <summary>
            All opened log files, we use this to make sure all log files are closed at the end.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFile.AllLocker">
            <summary>
            Locker for all log files list.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.LogFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.DateTimeStringConverter">
            <summary>
            Helper function to convert date time to short string.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.DateTimeStringConverter.ToLogTimestampString(System.DateTime,System.Boolean)">
            <summary>
            Convert this date time instance to a short string for log file (or other use).
            </summary>
            <param name="t">The time.</param>
            <param name="milliseconds">if set to <c>true</c> then display milliseconds in the string.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.DateTimeStringConverter.Months">
            <summary>
            The month names for timestamp string.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.LogFileFlags">
            <summary>
            List of options for log file.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFileFlags.None">
            <summary>
            No options are set.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFileFlags.IncludeTimestampInFileName">
            <summary>
            Include timestamp (at the time of opening the file) in the file name.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFileFlags.IncludeTimestampInLine">
            <summary>
            Include timestamp before each line written into the file.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFileFlags.AppendFile">
            <summary>
            Append log file instead of overwriting it.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFileFlags.AutoFlush">
            <summary>
            Automatically flush to file after each write. This can be slower but ensures that all data is written immediately, when
            application unexpectedly closes the unwritten lines in file buffer is not lost.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.LogFileFlags.DelayedOpen">
            <summary>
            Don't open the log file until first write is requested.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.MemoryStruct">
            <summary>
            This class can be used to allocate a temporary struct. By default when allocated all data is zeroed out, fill out the data using the index accessor where
            index is the offset in struct.
            </summary>
            <seealso cref="T:NetScriptFramework.TemporaryObject" />
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStruct.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Tools.MemoryStruct"/> class.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.MemoryStruct.Allocation">
            <summary>
            The allocation of struct.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.MemoryStruct.Fields">
            <summary>
            The field types.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStruct.Address">
            <summary>
            Gets the base address (pointer to struct).
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStruct.Size">
            <summary>
            Gets the size of struct in bytes.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStruct.SetValue(System.Int32,NetScriptFramework.Tools.MemoryStructField)">
            <summary>
            Sets the value in this struct but replaces any old values that may have conflicted with this offset and value size.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset;Offset can not be negative!
            or
            offset;Offset can not exceed the size of struct!
            or
            offset;Offset + value.Size can not exceed the size of struct!
            </exception>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStruct.SetValueSafe(System.Int32,NetScriptFramework.Tools.MemoryStructField)">
            <summary>
            Sets the value in this struct but doesn't set if it would conflict with any other value offsets that have been set so far in which case it returns false instead. If there was exact same type of
            value at the same offset it can be replaced with this function.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset;Offset can not be negative!
            or
            offset;Offset can not exceed the size of struct!
            or
            offset;Offset + value.Size can not exceed the size of struct!
            </exception>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStruct.GetValue(System.Int32)">
            <summary>
            Gets the value at offset. The offset does not have to be exact beginning offset of value as long as the value would conflict with this offset it returns the result. Check result's offset
            for actual offset of value.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset;Offset can not be negative!
            or
            offset;Offset can not exceed the size of struct!
            </exception>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStruct.ClearValue(System.Int32)">
            <summary>
            Clears the value at offset. This will set it back to zero and remove any traces of it.
            </summary>
            <param name="offset">The offset.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset;Offset can not be negative!
            or
            offset;Offset can not exceed the size of struct!
            </exception>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStruct.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NetScriptFramework.Tools.MemoryStructField"/> with the specified offset.
            </summary>
            <value>
            The <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </value>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStruct.Free">
            <summary>
            Frees resources.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.MemoryStructField">
            <summary>
            A value in memory struct.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NetScriptFramework.Tools.MemoryStructField"/> class from being created.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStructField.Size">
            <summary>
            Gets the size of value.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStructField.Offset">
            <summary>
            Gets the begin offset of value in struct.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStructField.Type">
            <summary>
            Gets the type of value.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStructField.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:NetScriptFramework.Tools.MemoryStructField.Packed">
            <summary>
            Gets the packed value.
            </summary>
            <value>
            The packed.
            </value>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.ReadPacked(System.UInt64,System.Int32@,System.Int32@,System.Byte@)">
            <summary>
            Reads the packed value.
            </summary>
            <param name="packed">The packed.</param>
            <param name="offset">The offset.</param>
            <param name="size">The size.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.FromPacked(System.UInt64,NetScriptFramework.Tools.MemoryStruct)">
            <summary>
            Get field data from packed value.
            </summary>
            <param name="packed">The packed.</param>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.MemoryStructField.FieldTypes">
            <summary>
            Memory struct field types.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.IntPtr)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToPointer(System.IntPtr@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.Single)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToFloat(System.Single@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.Double)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToDouble(System.Double@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.Byte)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToUInt8(System.Byte@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.SByte)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToInt8(System.SByte@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.UInt16)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToUInt16(System.UInt16@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.Int16)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToInt16(System.Int16@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.UInt32)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToUInt32(System.UInt32@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.Int32)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToInt32(System.Int32@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.UInt64)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToUInt64(System.UInt64@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.Int64)~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToInt64(System.Int64@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.op_Implicit(System.Byte[])~NetScriptFramework.Tools.MemoryStructField">
            <summary>
            Performs an implicit conversion from byte array to <see cref="T:NetScriptFramework.Tools.MemoryStructField"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">value.Length</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.MemoryStructField.TryToBytes(System.Byte[]@)">
            <summary>
            Tries to convert value.
            </summary>
            <param name="value">The value if successful.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.Block">
            <summary>
            Contains information about one block in a message.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Block.#ctor(NetScriptFramework.Tools.Message)">
            <summary>
            Create a new block.
            </summary>
            <param name="message">Message where this block belongs in.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Block.#ctor(NetScriptFramework.Tools.Block,NetScriptFramework.Tools.Message)">
            <summary>
            Copy a block to new message.
            </summary>
            <param name="block">Block to copy from.</param>
            <param name="msg">New message.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Block.HasAnyElementType(NetScriptFramework.Tools.BlockElementTypes)">
            <summary>
            Check if this block or any sub block has element with this type.
            </summary>
            <param name="type">Type to check.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.Block.Message">
            <summary>
            Parent message of block.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Block.Elements">
            <summary>
            Elements of block.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Block.ToString(NetScriptFramework.Tools.Parser,System.String@)">
            <summary>
            Convert block to string.
            </summary>
            <param name="parser">Parser to use.</param>
            <param name="result">Result is set here if we are successful. Otherwise error is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Block.Parse(NetScriptFramework.Tools.Message,System.String,System.Int32@,NetScriptFramework.Tools.Block@,System.Boolean)">
            <summary>
            Parse a block from text.
            </summary>
            <param name="message">Message where this block belongs in.</param>
            <param name="text">Text to parse from.</param>
            <param name="index">Current index in text.</param>
            <param name="result">Result will be set here if we return Ok.</param>
            <param name="isBlock">Is this a block or not.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.BlockParseStates">
            <summary>
            All possible states of block parse.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockParseStates.None">
            <summary>
            No state has been initialized.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockParseStates.Escaped">
            <summary>
            Currently have escaped.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockParseStates.ParameterList">
            <summary>
            Parameter list has been opened.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockParseStates.Literal">
            <summary>
            Literal symbol started.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockParseStates.HadParameterList">
            <summary>
            Already had parameter list.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.BlockElementTypes">
            <summary>
            List of all block element types.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockElementTypes.Argument">
            <summary>
            We expect to get an argument.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockElementTypes.Variable">
            <summary>
            We expect to get a variable (text).
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockElementTypes.Function">
            <summary>
            We expect to call a function.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockElementTypes.Block">
            <summary>
            This is another block.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockElementTypes.Literal">
            <summary>
            Just text, we don't parse this.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.BlockElementTypes.ParameterDelimiter">
            <summary>
            Delimiter of function parameters.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.IArgument">
            <summary>
            This implements functionality for an argument of message that can be parsed.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.IArgument.ParseArgument(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse an argument from this object.
            </summary>
            <param name="key">Keyword for argument.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.IArgument.ParseVariable(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a variable from this object.
            </summary>
            <param name="key">Keyword for variable.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.IArgument.ParseFunction(System.String,System.String[],NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a function from this object.
            </summary>
            <param name="key">Keyword for function.</param>
            <param name="args">Arguments for function.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.Message">
            <summary>
            This contains a message that may contain variables to be parsed by the parser.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Message.#ctor">
            <summary>
            Create a new empty message.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Message.#ctor(System.String)">
            <summary>
            Create a new message with text.
            </summary>
            <param name="text">Text to set. Null is not allowed.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Message.#ctor(NetScriptFramework.Tools.Message)">
            <summary>
            Copy an existing message.
            </summary>
            <param name="msg">Message to copy.</param>
        </member>
        <member name="P:NetScriptFramework.Tools.Message.Text">
            <summary>
            Get or set raw text of message.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Message.Parse(NetScriptFramework.Tools.Parser)">
            <summary>
            Parse text with given parser. If an error occurs this will throw an exception.
            </summary>
            <param name="parser">Parser to use. Set null to use default parser.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Message.TryParse(System.String@,NetScriptFramework.Tools.Parser)">
            <summary>
            Try to parse text with given parser. If an error occurs we will return false.
            </summary>
            <param name="parser">Parser to use. Set null to use default parser.</param>
            <param name="result">Result. This is error message if false is returned.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.Parser">
            <summary>
            Implements default message parser behavior.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Parser.#cctor">
            <summary>
            Perform static initialization.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Parser.#ctor">
            <summary>
            Create a new parser.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.EscapeSymbol">
            <summary>
            Get or set escape sequence symbol. Default is one backslash.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.VariableStartSymbol">
            <summary>
            Get or set variable block starting symbol. Default is &lt; (less than) sign.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.VariableEndSymbol">
            <summary>
            Get or set variable block ending symbol. Default is &gt; (greater than) sign.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.VariableDelimiterSymbol">
            <summary>
            Get or set variable block delimiter symbol. Default is . (dot) symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.ArgumentStartSymbol">
            <summary>
            Get or set argument list starting symbol. Default is ( (parenthesis start) sign.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.ArgumentEndSymbol">
            <summary>
            Get or set argument list ending symbol. Default is ) (parenthesis end) sign.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.ArgumentDelimiterSymbol">
            <summary>
            Get or set argument list delimiter symbol. Default is , (comma) symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.LiteralStartSymbol">
            <summary>
            Get or set literal string starting symbol. Default is " (double quote) sign.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.LiteralEndSymbol">
            <summary>
            Get or set literal string ending symbol. Default is " (double quote) sign.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.IgnoreBlockSymbol">
            <summary>
            Get or set symbols that should be ignored within a block.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.IgnoreAlwaysSymbol">
            <summary>
            Get or set symbols that should be ignored everywhere. Same as replacing with empty string.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Parser.ParseArgument(NetScriptFramework.Tools.Message,System.String,NetScriptFramework.Tools.IArgument)">
            <summary>
            Parse an argument by keyword.
            </summary>
            <param name="message">Message to parse on.</param>
            <param name="keyword">Keyword to parse.</param>
            <param name="obj">Object to parse on. This is null if base.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Parser.ParseVariable(NetScriptFramework.Tools.Message,System.String,NetScriptFramework.Tools.IArgument)">
            <summary>
            Parse a variable by keyword.
            </summary>
            <param name="message">Message to parse on.</param>
            <param name="keyword">Keyword to parse.</param>
            <param name="obj">Object to parse on. This is null if base.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Parser.ParseFunction(NetScriptFramework.Tools.Message,System.String,System.String[],NetScriptFramework.Tools.IArgument)">
            <summary>
            Parse a function by keyword.
            </summary>
            <param name="message">Message to parse on.</param>
            <param name="keyword">Keyword to parse.</param>
            <param name="args">Arguments of function.</param>
            <param name="obj">Object to parse on. This is null if base.</param>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Tools.Parser.Item(System.String)">
            <summary>
            Get or set argument to use in parser. This is also safe - if missing argument
            then null is returned and setting null will clear argument.
            </summary>
            <param name="keyword">Keyword of argument. This is case insensitive.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Parser.IsSymbol(System.String,System.Int32,NetScriptFramework.Tools.ParserActions,System.Int32@)">
            <summary>
            Check if text has symbol for current action.
            </summary>
            <param name="text">Text to check.</param>
            <param name="index">Index in text.</param>
            <param name="action">Action to check.</param>
            <param name="length">Length of symbol is set here.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.Arguments">
            <summary>
            Arguments added to this parser.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Parser.Functions">
            <summary>
            Custom functions.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.ParserFlags">
            <summary>
            Options for parser.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.ParserActions">
            <summary>
            All actions that the parser can perform.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.Escape">
            <summary>
            Check for escape symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.VariableStart">
            <summary>
            Check for variable start symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.VariableEnd">
            <summary>
            Check for variable end symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.VariableDelimiter">
            <summary>
            Check for variable delimiter symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.ArgumentStart">
            <summary>
            Check for argument list start symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.ArgumentEnd">
            <summary>
            Check for argument list end symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.ArgumentDelimiter">
            <summary>
            Check for argument delimiter symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.LiteralStart">
            <summary>
            Check for literal start symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.LiteralEnd">
            <summary>
            Check for literal end symbol.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.BlockIgnore">
            <summary>
            Check for block ignore symbols.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.ParserActions.AlwaysIgnore">
            <summary>
            Check for always ignore symbols.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.SymbolList">
            <summary>
            Represents a list of symbols that can be modified.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.SymbolList.#ctor(System.String[])">
            <summary>
            Create a new symbol list.
            </summary>
            <param name="defaultSymbols">Default symbols to add to list.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.SymbolList.Add(System.String)">
            <summary>
            Add a symbol to this list.
            </summary>
            <param name="symbol">Symbol to add.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.SymbolList.Remove(System.String)">
            <summary>
            Remove a symbol from this list.
            </summary>
            <param name="symbol">Symbol to remove.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.SymbolList.Clear">
            <summary>
            Clear all added symbols.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.SymbolList.Test(System.String,System.Int32,System.Int32@)">
            <summary>
            Test if text at index matches any symbols.
            </summary>
            <param name="text">Text to test.</param>
            <param name="index">Index in text where to start testing.</param>
            <param name="length">Length of symbol if returned true.</param>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Tools.SymbolList.Count">
            <summary>
            Get count of added symbols.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.SymbolList.ToArray">
            <summary>
            Return an array of symbols.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.SymbolList.Symbols">
            <summary>
            List of symbols.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.Randomizer">
            <summary>
            Random number generator. Thread safe.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.NextDouble">
            <summary>
            Generate a double between 0 and 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.NextInt(System.Int32,System.Int32)">
            <summary>
            Generate an integer, max is exclusive.
            </summary>
            <param name="min">Inclusive minimum value.</param>
            <param name="max">Exclusive maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.Roll(System.Double)">
            <summary>
            Roll chance. Chance must be between 0 and 1.
            </summary>
            <param name="chance">Chance to roll.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.NextEntry``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Get random entry from a list and remove that entry from the list.
            </summary>
            <typeparam name="T">Type of variable.</typeparam>
            <param name="list">List to get from.</param>
            <param name="remove">Remove the entry from list afterwards.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">list</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.NextEntry``1(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,System.Double}},System.Boolean)">
            <summary>
            Get random entry from a list and remove that entry from the list. This is roulette
            wheel selection where double is the weight of entry.
            </summary>
            <typeparam name="T">Type of variable.</typeparam>
            <param name="list">List to get from.</param>
            <param name="remove">Remove the entry from list afterwards.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">list</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.NextEntry``1(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{``0,System.Double}},System.Double@,System.Boolean)">
            <summary>
            Get random entry from a list and remove that entry from the list. This is roulette
            wheel selection where double is the weight of entry.
            </summary>
            <typeparam name="T">Type of variable.</typeparam>
            <param name="list">List to get from.</param>
            <param name="max">Precalculated sum.</param>
            <param name="remove">Remove the entry from list afterwards.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">list</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.NextEntry``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Double},System.Double@,System.Boolean)">
            <summary>
            Get random entry from a list and remove that entry from the list. This is roulette
            wheel selection where double is the weight of entry.
            </summary>
            <typeparam name="T">Type of variable.</typeparam>
            <param name="list">List to get from.</param>
            <param name="weightSelector">Weight selector function.</param>
            <param name="max">Precalculated sum.</param>
            <param name="remove">Remove the entry from list afterwards.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">list</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">list</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.Randomizer.Init">
            <summary>
            Make sure generator is initialize for current thread.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Randomizer.RNG">
            <summary>
            RNG for current thread.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Randomizer.Locker">
            <summary>
            Locker for generating a generator.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Randomizer.Generator">
            <summary>
            Seed generator.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.Timer">
            <summary>
            This helps measure time. The timer is not started automatically.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Timer.#ctor">
            <summary>
            Create a new timer. The timer is not started automatically.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.Timer.Offset">
            <summary>
            Get or set time offset. This will be added to time.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.Timer.Time">
            <summary>
            Get amount of time in milliseconds that have passed since start of timer.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.Timer.ManualUpdate">
            <summary>
            Get or set whether time updates will be performed manually. Default is false, time
            is updated every time we ask for it. Manual updates can be useful if timer should only change
            at specific locations in code.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Timer.Update">
            <summary>
            Perform manual time update now.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Timer.Start">
            <summary>
            Start timer.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Timer.Stop">
            <summary>
            Stop timer.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.Timer.IsRunning">
            <summary>
            Check if timer is started and is currently running.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Timer.Reset">
            <summary>
            Reset and stop timer. Offset is not cleared.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Timer.Restart">
            <summary>
            Reset and start timer. Offset is not cleared.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Tools.UIDGenerator">
            <summary>
            Unique ID generator.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.UIDGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Tools.UIDGenerator"/> class.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.UIDGenerator.HighPart">
            <summary>
            The high part for unique IDs. This is generated from timestamp.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.UIDGenerator.LowPart">
            <summary>
            The low part for unique IDs. This is a counter.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.UIDGenerator.Generate">
            <summary>
            Generates a unique ID.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.Value">
            <summary>
            Implements a common value type.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Create a new value from binary data. This must be the same data returned from ToArray.
            </summary>
            <param name="data">Data to convert.</param>
            <param name="index">Index in data when to start reading.</param>
            <param name="length">Maximum length of bytes to read.</param>
            <param name="size">Size of bytes actually read will be set here.</param>
            <exception cref="T:System.ArgumentNullException">data</exception>
            <exception cref="T:System.ArgumentException">data</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index
            or
            length
            </exception>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(NetScriptFramework.Tools.Value)">
            <summary>
            Copy another value.
            </summary>
            <param name="value">Value to copy.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.IConvertible)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Boolean)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Char)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.SByte)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Byte)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Int16)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.UInt16)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Int32)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.UInt32)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Int64)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.UInt64)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Single)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Double)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.Decimal)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.String)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set. If null then it will be set as empty string!</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.#ctor(System.DateTime)">
            <summary>
            Create a new value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToString">
            <summary>
            Convert value to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToString(System.IFormatProvider)">
            <summary>
            Convert value. Exception from internal code is not possible.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToArray">
            <summary>
            Convert value to byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Write value to stream.
            </summary>
            <param name="f">Stream to write to.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ReadFromStream(System.IO.BinaryReader)">
            <summary>
            Read value from stream.
            </summary>
            <param name="f">Stream to read from.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.Equals(System.Object)">
            <summary>
            Check if two values are equal.
            </summary>
            <param name="obj">Another value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.GetHashCode">
            <summary>
            Get hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.CompareTo(System.Object)">
            <summary>
            Compare to another value.
            </summary>
            <param name="obj">Value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.GetTypeCode">
            <summary>
            Get type code of value. This is guaranteed to not be Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="conversionType">Type to convert to.</param>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToBoolean(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToBoolean(System.Boolean@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToByte(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToByte(System.Byte@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToSByte(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToSByte(System.SByte@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToChar(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToChar(System.Char@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToInt16(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToInt16(System.Int16@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToUInt16(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToUInt16(System.UInt16@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToInt32(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToInt32(System.Int32@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToUInt32(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToUInt32(System.UInt32@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToInt64(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToInt64(System.Int64@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToUInt64(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToUInt64(System.UInt64@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToSingle(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToSingle(System.Single@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToDouble(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToDouble(System.Double@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToDecimal(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToDecimal(System.Decimal@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ToDateTime(System.IFormatProvider)">
            <summary>
            Convert value or throw exception.
            </summary>
            <param name="provider">Format provider.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryToDateTime(System.DateTime@)">
            <summary>
            Try to convert value and return if we were successful.
            </summary>
            <param name="result">Result will be set here if we return true.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Boolean)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Byte)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.SByte)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Char)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Int16)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.UInt16)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Int32)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.UInt32)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Int64)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.UInt64)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Single)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Double)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.Decimal)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.String)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Implicit(System.DateTime)~NetScriptFramework.Tools.Value">
            <summary>
            Convert to value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Boolean">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Byte">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.SByte">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Char">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Int16">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.UInt16">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Int32">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.UInt32">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Int64">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.UInt64">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Single">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Double">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.Decimal">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.String">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.op_Explicit(NetScriptFramework.Tools.Value)~System.DateTime">
            <summary>
            Convert from value type.
            </summary>
            <param name="v">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToBool(System.Boolean@,System.Boolean@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToSByte(System.SByte@,System.SByte@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToByte(System.Byte@,System.Byte@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToChar(System.Char@,System.Char@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToInt16(System.Int16@,System.Int16@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToUInt16(System.UInt16@,System.UInt16@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToInt32(System.Int32@,System.Int32@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToUInt32(System.UInt32@,System.UInt32@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToInt64(System.Int64@,System.Int64@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToUInt64(System.UInt64@,System.UInt64@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToSingle(System.Single@,System.Single@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToDouble(System.Double@,System.Double@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToDecimal(System.Decimal@,System.Decimal@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToString(System.String@,System.String@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value._tryToDateTime(System.DateTime@,System.DateTime@)">
            <summary>
            Try to convert value internally.
            </summary>
            <param name="result">Result will be set here if it's valid.</param>
            <param name="result2">Unchecked result will be set here always.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.Value.CurrentValue">
            <summary>
            Get or set base value.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Tools.Value.CurrentType">
            <summary>
            Get or set base type code.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.Parse(System.String,System.TypeCode)">
            <summary>
            Get value from text and throw if we were not successful.
            </summary>
            <param name="text">Given text.</param>
            <param name="type">Type of value to convert to.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.TryParse(System.String,System.TypeCode,NetScriptFramework.Tools.Value@)">
            <summary>
            Get value from text and return if we were successful.
            </summary>
            <param name="text">Given text.</param>
            <param name="type">Type of value to convert to.</param>
            <param name="result">Result will be set here. If false is returned then result may
            or may not have value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ParseIntNumber(System.String,System.Int32,System.Boolean@,System.Object@)">
            <summary>
            Parse an integer number.
            </summary>
            <param name="text">Text to parse from.</param>
            <param name="optimalSize">Optimal number of bytes.</param>
            <param name="tryDouble">Try to parse as double instead.</param>
            <param name="result">Resulting value will be set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ParseUIntNumber(System.String,System.Int32,System.Boolean@,System.Object@)">
            <summary>
            Parse an unsigned integer number.
            </summary>
            <param name="text">Text to parse from.</param>
            <param name="optimalSize">Optimal number of bytes.</param>
            <param name="tryDouble">This will be set if we instead should try to parse double.</param>
            <param name="result">Result will be set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.ParseUFloatNumber(System.String,System.Int32,System.Object@)">
            <summary>
            Parse a floating point number.
            </summary>
            <param name="text">Text to parse from.</param>
            <param name="optimalSize">Optimal number of bytes.</param>
            <param name="result">Result will be set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.GetBigNumber(System.Int64)">
            <summary>
            Convert a big positive integer value into smallest possible amount of bytes. Maximum size
            is 9 bytes.
            </summary>
            <param name="value">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.GetBigNumberFirst(System.Byte,System.Int32@)">
            <summary>
            Get big number, first pass.
            </summary>
            <param name="first">First byte.</param>
            <param name="count">Count of bytes to read after this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.Value.GetBigNumberSecond(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get second part of big number from bytes.
            </summary>
            <param name="prefix">Prefix (first byte value mask).</param>
            <param name="data">Rest of bytes.</param>
            <param name="index">Index in buffer.</param>
            <param name="length">Length of bytes.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Tools.ValueMap">
            <summary>
            Implements a map for values with case insensitive string key.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.#ctor">
            <summary>
            Create a new empty value map.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.#ctor(NetScriptFramework.Tools.ValueMap)">
            <summary>
            Copy an existing value map.
            </summary>
            <param name="map">Map to copy.</param>
            <exception cref="T:System.ArgumentNullException">map</exception>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.Add(System.String,NetScriptFramework.Tools.Value)">
            <summary>
            Add a value to map.
            </summary>
            <param name="key">Key of value.</param>
            <param name="value">Value to add.</param>
            <exception cref="T:System.ArgumentNullException">
            key
            or
            value
            </exception>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ContainsKey(System.String)">
            <summary>
            Check if map contains a key.
            </summary>
            <param name="key">Key to check.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="P:NetScriptFramework.Tools.ValueMap.Keys">
            <summary>
            Get all added keys.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryGetValue(System.String,NetScriptFramework.Tools.Value@)">
            <summary>
            Try to get value and return if we did.
            </summary>
            <param name="key">Key to get by.</param>
            <param name="value">Value to set.</param>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Tools.ValueMap.Values">
            <summary>
            Get all added values.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ValueMap.Item(System.String)">
            <summary>
            Get or set value by key. This is safe and will return null if value is not present.
            Key must not be null! Setting value to null will remove it from the map.
            </summary>
            <value>
            The <see cref="T:NetScriptFramework.Tools.Value"/>.
            </value>
            <param name="key">Key to use. Must not be null.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            key
            </exception>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToBool(System.String,System.Boolean@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToByte(System.String,System.Byte@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToChar(System.String,System.Char@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToInt16(System.String,System.Int16@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToUInt16(System.String,System.UInt16@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToInt32(System.String,System.Int32@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToUInt32(System.String,System.UInt32@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToInt64(System.String,System.Int64@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToUInt64(System.String,System.UInt64@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToSingle(System.String,System.Single@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToDouble(System.String,System.Double@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToDecimal(System.String,System.Decimal@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToString(System.String,System.String@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToSByte(System.String,System.SByte@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.TryToDateTime(System.String,System.DateTime@)">
            <summary>
            Try convert value by key and return if we did.
            </summary>
            <param name="key">Key to get.</param>
            <param name="result">Result is set here.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToBool(System.String,System.Boolean)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToByte(System.String,System.Byte)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToChar(System.String,System.Char)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToInt16(System.String,System.Int16)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToUInt16(System.String,System.UInt16)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToInt32(System.String,System.Int32)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToUInt32(System.String,System.UInt32)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToInt64(System.String,System.Int64)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToUInt64(System.String,System.UInt64)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToSingle(System.String,System.Single)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToDouble(System.String,System.Double)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToDecimal(System.String,System.Decimal)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToString(System.String,System.String)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToSByte(System.String,System.SByte)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.ToDateTime(System.String,System.DateTime)">
            <summary>
            Try convert value by key.
            </summary>
            <param name="key">Key to get.</param>
            <param name="error">If missing or couldn't convert return this.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.Add(System.Collections.Generic.KeyValuePair{System.String,NetScriptFramework.Tools.Value})">
            <summary>
            Add item to map.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.Clear">
            <summary>
            Clear map.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.Contains(System.Collections.Generic.KeyValuePair{System.String,NetScriptFramework.Tools.Value})">
            <summary>
            Check if map contains item.
            </summary>
            <param name="item">Item to check.</param>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Tools.ValueMap.Count">
            <summary>
            Get count of entries.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Tools.ValueMap.IsReadOnly">
            <summary>
            Check if map is read only.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.Remove(System.Collections.Generic.KeyValuePair{System.String,NetScriptFramework.Tools.Value})">
            <summary>
            Remove item from map.
            </summary>
            <param name="item">Item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.Remove(System.String)">
            <summary>
            Remove value from map.
            </summary>
            <param name="key">Key to remove by.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.CopyTo(System.Collections.Generic.KeyValuePair{System.String,NetScriptFramework.Tools.Value}[],System.Int32)">
            <summary>
            Copy current values to array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Index in array when to start copying.</param>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Tools.ValueMap.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Tools.ValueMap.internalDict">
            <summary>
            Internal values.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Loader">
            <summary>
            Helper class for assembly loading.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Loader.Load(System.IO.FileInfo,System.Reflection.Assembly@)">
            <summary>
            Loads the specified file as assembly. This will throw exception if there are problems. It's possible that the assembly was loaded anyway.
            Loading a file with same name again will attempt to return same assembly even if the file versions are different.
            </summary>
            <param name="file">The file to load from.</param>
            <param name="result">The result is set here. Result may be set even when an exception is thrown.</param>
        </member>
        <member name="M:NetScriptFramework.Loader.TryLoadAssembly(System.String)">
            <summary>
            Tries the load assembly by its short name. For example TryLoadAssembly("NetScriptFramework") would try to load
            the core framework assembly.
            </summary>
            <param name="name">The name of assembly to load.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Loader.OnAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Called when trying to resolve an assembly.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Loader.Initialize">
            <summary>
            Initializes the assembly loader.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Loader.SetDllDirectory(System.String)">
            <summary>
            Sets the DLL directory. Internal API call.
            </summary>
            <param name="lpPathName">Path.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Loader.Locker">
            <summary>
            The locker for loading.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Loader.Loaded">
            <summary>
            The loaded assembly list.
            </summary>
        </member>
        <member name="T:NetScriptFramework.AssemblyLoadResult">
            <summary>
            Internal class for storing loaded assembly info.
            </summary>
        </member>
        <member name="F:NetScriptFramework.AssemblyLoadResult.FileName">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="F:NetScriptFramework.AssemblyLoadResult.Assembly">
            <summary>
            The assembly that was loaded.
            </summary>
        </member>
        <member name="F:NetScriptFramework.AssemblyLoadResult.Exception">
            <summary>
            The exception if any was thrown.
            </summary>
        </member>
        <member name="T:NetScriptFramework.Memory">
            <summary>
            Implement helper functions for reading and writing from memory.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeThisCall(System.IntPtr,System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function.
            </summary>
            <param name="thisAddress">The address of object instance.</param>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeThisCallF(System.IntPtr,System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function that returns a floating point value.
            </summary>
            <param name="thisAddress">The address of object instance.</param>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeThisCallD(System.IntPtr,System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function that returns a double value.
            </summary>
            <param name="thisAddress">The address of object instance.</param>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeStdCall(System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "stdcall" native function.
            </summary>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeStdCallF(System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "stdcall" native function that returns a floating point value.
            </summary>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeStdCallD(System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "stdcall" native function that returns a floating point value.
            </summary>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeCdecl(System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "cdecl" native function. For x64 this is also used for "fastcall".
            </summary>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeCdeclF(System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "cdecl" native function that returns a floating point value. For x64 this is also used for "fastcall".
            </summary>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InvokeCdeclD(System.IntPtr,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "cdecl" native function that returns a floating point value. For x64 this is also used for "fastcall".
            </summary>
            <param name="funcAddress">The function address.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.PrepareArguments(System.Int32,NetScriptFramework.InvokeArgument[],System.Nullable{System.IntPtr},System.Int32@)">
            <summary>
            Prepares the arguments for a native function call.
            </summary>
            <param name="funcReturnType">The function return value type.</param>
            <param name="args">The arguments.</param>
            <param name="thisPtr">This pointer if it's thiscall.</param>
            <param name="count">Argument count to pass.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetScriptFramework.Memory.Allocate(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Allocates memory in current process. Returned value contains information about the allocation, including the base address. If
            returned instance is disposed the underlying memory will be freed! Use Pin method on the returned value to avoid the memory
            from being freed automatically.
            </summary>
            <param name="size">The size of memory to allocate.</param>
            <param name="align">The alignment of memory. This is ignored if execute parameter is <c>true</c>.</param>
            <param name="execute">If set to <c>true</c> then returned memory has read + write + execute access, otherwise it will have only read + write access.
            This should be <c>false</c> always unless you plan to execute assembly code in that memory.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            size;Size can't be zero or negative!
            or
            align;Alignment can't be negative!
            or
            size
            </exception>
            <exception cref="T:System.OutOfMemoryException">Failed to allocate memory using C allocator! Requested size was ...</exception>
        </member>
        <member name="M:NetScriptFramework.Memory.AllocateStruct(System.Int32)">
            <summary>
            Allocates a structure. Default values will be zero. Use indexer for easy modification.
            </summary>
            <param name="size">The size of structure.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
        </member>
        <member name="M:NetScriptFramework.Memory.AllocateString(System.String,System.Boolean)">
            <summary>
            Allocates a string into the process memory that can be used by native code. Returned value is the allocation information
            including the address. If returned value is disposed the underlying memory is automatically freed! Use Pin method on the return
            value to avoid automatically freeing the memory when reference is lost.
            </summary>
            <param name="text">The text to allocate.</param>
            <param name="wide">If set to <c>true</c> then allocate as Unicode (2 bytes per character), otherwise allocate as ANSI (1 byte per character).</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NetScriptFramework.Memory.FreeString(System.IntPtr)">
            <summary>
            Frees the previously allocated string.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:NetScriptFramework.Memory.FreeCode(System.IntPtr,System.Int32,NetScriptFramework.CodePageAllocator)">
            <summary>
            Frees previously allocated code.
            </summary>
            <param name="address">The address.</param>
            <param name="size">The size.</param>
            <param name="page">The page.</param>
        </member>
        <member name="T:NetScriptFramework.Memory.AllocationProtectFlags">
            <summary>
            Memory allocation protection flags.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Memory.GetRegionInfo(System.IntPtr,System.IntPtr@,System.Int64@,NetScriptFramework.Memory.AllocationProtectFlags@)">
            <summary>
            Gets the memory region information at specified address. The address does not have to be the base address of the region. Returns false if this is not a valid
            memory region or VirtualQuery failed for some other reason.
            </summary>
            <param name="address">The address.</param>
            <param name="baseAddress">The base address of the region.</param>
            <param name="size">The size of the region in bytes starting from base address.</param>
            <param name="flags">The protection flags.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.IsValidRegion(NetScriptFramework.Memory.AllocationProtectFlags,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the region is valid by its protection flags.
            </summary>
            <param name="flags">The flags.</param>
            <param name="read">if set to <c>true</c> then reading must be allowed to be valid.</param>
            <param name="write">if set to <c>true</c> then writing must be allowed to be valid.</param>
            <param name="executable">if set to <c>true</c> then execution must be allowed to be valid.</param>
            <param name="allowGuard">if set to <c>true</c> then guard flag is allowed, otherwise returns false if there is a guard flag.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.IsValidRegion(System.IntPtr,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the memory region at the specified address is valid.
            </summary>
            <param name="address">The address we wish to check.</param>
            <param name="size">The size in bytes of how much memory must be valid.</param>
            <param name="read">If set to <c>true</c> then we must have read access to this region.</param>
            <param name="write">If set to <c>true</c> then we must have write access to this region.</param>
            <param name="executable">If set to <c>true</c> then we must have code execution access to this region.</param>
            <param name="allowGuard">Allow the page to be guarded?</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadUInt8(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInt8(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadChar(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInt16(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadUInt16(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInt32(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInterlockedInt32(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadUInt32(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInterlockedUInt32(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInt64(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInterlockedInt64(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadUInt64(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadInterlockedUInt64(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadFloat(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadDouble(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadDouble128(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadFloat128(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadPointer(System.IntPtr,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.TryReadPointer(System.IntPtr,System.IntPtr@,System.Boolean)">
            <summary>
            Tries to read pointer and instead of throwing exception returns false if failed.
            </summary>
            <param name="address">The address.</param>
            <param name="result">The result.</param>
            <param name="protect">if set to <c>true</c> [protect].</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadString(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="wide">If set to <c>true</c> then string is unicode (2 bytes per character).</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadStringIfItsString(System.IntPtr,System.Boolean)">
            <summary>
            Reads string from specified memory address but only if it's probably a string.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="escapeChars">Escape some characters like newline.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.ReadBytes(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Reads value from specified memory address.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="length">Amount of bytes to read.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.VerifyBytes(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Verifies the bytes at address. If the bytes match then returns true. Use ? or * or . symbol for wildcard. Either space or dash is allowed to be separator for bytes.
            Don't write 0x in front of bytes!<para></para>Possible allowed types of input:<para></para>
            ab38c100F817..82<para></para>
            AB 38 C1 00 F8 17 ? 82<para></para>
            AB-38-C1-00-F8-17-?-82<para></para>
            AB 38- c1 00 F8 17 ?? 82
            </summary>
            <param name="address">The address.</param>
            <param name="hex">The hexadecimal byte array.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.TryReadBytes(System.IntPtr,System.Int32,System.Byte[]@,System.Boolean)">
            <summary>
            Tries to read bytes but instead of exception it will return false on fail.
            </summary>
            <param name="address">The address to read from.</param>
            <param name="length">The length of bytes to read.</param>
            <param name="result">The result. This should be a null value because a new byte array will be allocated during this method if it succeeds.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before reading and return after.
            Only set this true if you are sure you don't have read permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInt8(System.IntPtr,System.SByte,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteUInt8(System.IntPtr,System.Byte,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInt16(System.IntPtr,System.Int16,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteUInt16(System.IntPtr,System.UInt16,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInt32(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInterlockedInt32(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteUInt32(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInterlockedUInt32(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInt64(System.IntPtr,System.Int64,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInterlockedInt64(System.IntPtr,System.Int64,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteUInt64(System.IntPtr,System.UInt64,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteInterlockedUInt64(System.IntPtr,System.UInt64,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteFloat(System.IntPtr,System.Single,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteDouble(System.IntPtr,System.Double,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteDouble128(System.IntPtr,System.Double,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteFloat128(System.IntPtr,System.Single,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WritePointer(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteString(System.IntPtr,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="wide">Write as wide (2 byte) string or regular (1 byte) string.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteBytes(System.IntPtr,System.Byte[],System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteBytes(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Writes value to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="value">The value to write.</param>
            <param name="index">The index in array when to start writing.</param>
            <param name="length">The amount of bytes to write starting at index.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteZero(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes zero bytes to specified memory address.
            </summary>
            <param name="address">The address to write to.</param>
            <param name="size">The amount of bytes to write.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
        </member>
        <member name="M:NetScriptFramework.Memory.Copy(System.IntPtr,System.IntPtr,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Copies the memory from specified source to target.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="size">The size.</param>
            <param name="protectSource">if set to <c>true</c> [protect source].</param>
            <param name="protectTarget">if set to <c>true</c> [protect target].</param>
        </member>
        <member name="F:NetScriptFramework.Memory.ZeroBytes">
            <summary>
            The zero bytes array.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Memory.InterlockedIncrement32(System.IntPtr,System.Boolean)">
            <summary>
            Changes value at specified memory address and returns the modified value.
            </summary>
            <param name="address">The address to change.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InterlockedDecrement32(System.IntPtr,System.Boolean)">
            <summary>
            Changes value at specified memory address and returns the modified value.
            </summary>
            <param name="address">The address to change.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InterlockedIncrement64(System.IntPtr,System.Boolean)">
            <summary>
            Changes value at specified memory address and returns the modified value.
            </summary>
            <param name="address">The address to change.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.InterlockedDecrement64(System.IntPtr,System.Boolean)">
            <summary>
            Changes value at specified memory address and returns the modified value.
            </summary>
            <param name="address">The address to change.</param>
            <param name="protect">If set to <c>true</c> then change protection flags of memory page before writing and return after.
            Only set this true if you are sure you don't have write permissions!</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.FindCodeCave(System.IntPtr,System.Int32,System.IntPtr@)">
            <summary>
            Finds a code cave on the specific memory page.
            </summary>
            <param name="page">The page. This does not have to be the base address of the page, it can be anywhere in it.</param>
            <param name="size">The size of code cave. Expect this to be less than 15 bytes.</param>
            <param name="result">The result if we find it.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.FindAllCodeCaves(System.IntPtr,System.Int32)">
            <summary>
            Finds all code caves in the specified memory page.
            </summary>
            <param name="page">The page. This does not have to be the base address of the page, it can be anywhere in it.</param>
            <param name="size">The size of code cave. Expect this to be less than 15 bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteNativeCode(System.IntPtr,System.Int32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Writes the native assembly code to the specified address. This will create a redirect to a new code location at address.
            </summary>
            <param name="address">The address where to write it.</param>
            <param name="includeLength">Length of the code to include in redirected code location. This code must not use any address specific instructions (e.g. jmp or jz or mov x, cs:1234 but rel-call is allowed if it's the only instruction).</param>
            <param name="replaceLength">Length of the replaced code. This is the code that will be replaced with new code. Must be at least 5 bytes.</param>
            <param name="assemblyCode">The custom assembly code to execute.</param>
            <param name="placeIncludedCodeBeforeNewCode">If set to <c>true</c> then place included code before new code, otherwise place included code after new code. This does nothing if includeLength is 0.</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.ArgumentNullException">assemblyCode</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">replaceLength;Replaced code length must be at least 5 bytes!</exception>
            <exception cref="T:System.ArgumentException">The replaced code would require a code cave but didn't find an available code cave of length  + jmpAway.Length +  in the code page!</exception>
        </member>
        <member name="M:NetScriptFramework.Memory.Convert(System.IntPtr)">
            <summary>
            Converts the specified pointer to a unsigned long value.
            </summary>
            <param name="ptr">The pointer.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.Convert(System.UInt64)">
            <summary>
            Converts the specified unsigned long to a pointer value.
            </summary>
            <param name="ptr">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.Read(System.IntPtr,System.Byte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            Reads memory internally from the specified address.
            </summary>
            <param name="address">The address.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">The length.</param>
            <param name="protect">if set to <c>true</c> [protect].</param>
            <param name="intl">Interlocked type.</param>
            <exception cref="T:NetScriptFramework.MemoryAccessException"></exception>
        </member>
        <member name="M:NetScriptFramework.Memory.TryRead(System.IntPtr,System.Byte[],System.Int32,System.Boolean,System.Int32)">
            <summary>
            Reads memory internally from the specified address.
            </summary>
            <param name="address">The address.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">The length.</param>
            <param name="protect">if set to <c>true</c> [protect].</param>
            <param name="intl">Interlocked type.</param>
            <exception cref="T:NetScriptFramework.MemoryAccessException"></exception>
        </member>
        <member name="M:NetScriptFramework.Memory.Write(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Writes memory internally to the specified address.
            </summary>
            <param name="address">The address.</param>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="length">The length.</param>
            <param name="protect">if set to <c>true</c> [protect].</param>
            <param name="intl">Interlocked type.</param>
            <exception cref="T:NetScriptFramework.MemoryAccessException">
            </exception>
        </member>
        <member name="M:NetScriptFramework.Memory.GetMainModuleVersion">
            <summary>
            Gets the main module version.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Memory.ProtectedMemoryLocker">
            <summary>
            The protected memory locker. This is used to make sure memory protection flags are returned correctly if reading or writing from multiple threads.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Memory.ExploreRTTI(System.IntPtr,System.IntPtr@,System.Collections.Generic.List{System.Tuple{System.IntPtr,System.Int32}}@)">
            <summary>
            Explores the rtti data of object. Returns false if failed for any reason.
            </summary>
            <param name="obj">The object pointer.</param>
            <param name="baseObj">The base object pointer will be set here. May or may not equal the object pointer.</param>
            <param name="typeDescriptors">The type descriptors and their offsets from base object.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.GetCurrentNativeThreadId">
            <summary>
            Gets the current native thread identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.SuspendAllThreadsExcentCurrent">
            <summary>
            Suspends all threads in the process, except the currently executing thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Memory.ResumeAllThreadsExceptCurrent">
            <summary>
            Resumes all threads in the process, except the currently executing thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Memory.SuspendAllThreadsExceptCurrentAndSpecified(System.Int32[])">
            <summary>
            Suspends all threads except current and specified.
            </summary>
            <param name="specified">The specified threads not to suspend.</param>
        </member>
        <member name="M:NetScriptFramework.Memory.ResumeAllThreadsExceptCurrentAndSpecified(System.Int32[])">
            <summary>
            Resumes all threads except current and specified.
            </summary>
            <param name="specified">The specified threads not to resume.</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteNop(System.IntPtr,System.Int32)">
            <summary>
            Writes the assembly NOP opcodes to address. This will use safe writing so we can write on code pages as well.
            </summary>
            <param name="address">The address.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:NetScriptFramework.Memory.WriteHook(NetScriptFramework.HookParameters)">
            <summary>
            Write a .NET code hook into a specific memory address.
            </summary>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">parameters
            or
            parameters.Address
            or
            parameters.Action</exception>
            <exception cref="T:System.InvalidOperationException">Unable to place .NET hook at address 0x + Convert(parameters.Address).ToString(X) +  - 0x + (Convert(parameters.Address) + (uint)parameters.ReplaceLength) +  because there is another hook already in place that would overlap! Previous hook was placed by  + placedBy
            or</exception>
            <exception cref="T:System.ArgumentException">parameters.ReplaceLength;Replace length must be at least  + requiredLength +  bytes when  + (isLongHook ? far jump : near jump) +  is used!</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">parameters.IncludeLength;Include length can't be a negative value!</exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetScriptFramework.Memory.PrepareNETHook">
            <summary>
            Prepares the .NET hooking code.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Memory.GetInProgressHooks(System.Collections.Generic.List{NetScriptFramework.HookInfo},System.Int32@)">
            <summary>
            Gets the in progress executing hooks.
            </summary>
            <param name="hooks">The hooks.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:NetScriptFramework.Memory.GetHookBytesSource64_Far(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the byte code for hooking at source address in 64 bit process.
            </summary>
            <param name="source">The source address.</param>
            <param name="target">The target where to jump.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.GetHookBytesSource64_Near(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the byte code for hooking at source address in 64 bit process.
            </summary>
            <param name="source">The source address.</param>
            <param name="target">The target where to jump.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.AddHookIfNoOverlap(NetScriptFramework.HookInfo,System.IntPtr,System.Int32,System.String)">
            <summary>
            Adds the hook if no overlap with other hooks.
            </summary>
            <param name="self">The self.</param>
            <param name="begin">The begin.</param>
            <param name="size">The size.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.GetHook(System.IntPtr)">
            <summary>
            Gets the hook.
            </summary>
            <param name="addr">The addr.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.GetHookReal(System.IntPtr)">
            <summary>
            Gets the hook.
            </summary>
            <param name="addr">The addr.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Memory.DoAction(System.IntPtr,System.Int32)">
            <summary>
            Invoke previously registered action. This is called from unmanaged code.
            </summary>
            <param name="cpu_address">The address to CPU register info.</param>
            <param name="pass">The pass.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Trying to invoke missing action (actionId)!</exception>
        </member>
        <member name="T:NetScriptFramework.HookInfo">
            <summary>
            Information about a .NET code hook.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.Address">
            <summary>
            The base address of hook.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.Length">
            <summary>
            The length of hook.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.Assembly">
            <summary>
            The assembly that installed the hook.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.Plugin">
            <summary>
            The plugin associated with assembly.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.Before">
            <summary>
            The action.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.After">
            <summary>
            The action.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.IsFarJump">
            <summary>
            Is this using far jump or near?
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.Include">
            <summary>
            The pointer to included code cave.
            </summary>
        </member>
        <member name="F:NetScriptFramework.HookInfo.Include2">
            <summary>
            The pointer to after.
            </summary>
        </member>
        <member name="T:NetScriptFramework.MemoryAllocation">
            <summary>
            Contains information about a memory allocation. Also implements a disposable pattern to free the underlying memory, use
            Pin or Unpin methods to prevent memory from being freed even after this allocation instance reference is lost.
            </summary>
            <seealso cref="T:NetScriptFramework.TemporaryObject" />
        </member>
        <member name="M:NetScriptFramework.MemoryAllocation.#ctor(System.IntPtr,System.Int32,System.Int32,NetScriptFramework.MemoryAllocation.MemoryAllocationTypes,NetScriptFramework.CodePageAllocator)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryAllocation"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="size">The size.</param>
            <param name="align">The align.</param>
            <param name="type">The type.</param>
            <param name="page">The page.</param>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.CodePage">
            <summary>
            The code page if it is code.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.Address">
            <summary>
            The base address of memory allocation location.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.Size">
            <summary>
            The safe size of allocation.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.Align">
            <summary>
            The alignment of allocation.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.Type">
            <summary>
            The type of allocation.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryAllocation.Zero">
            <summary>
            Zeroes this instance.
            </summary>
        </member>
        <member name="T:NetScriptFramework.MemoryAllocation.MemoryAllocationTypes">
            <summary>
            List of memory allocation types.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.MemoryAllocationTypes.Heap">
            <summary>
            The memory is allocated on heap and has read + write access.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.MemoryAllocationTypes.Code">
            <summary>
            The memory is allocated in a memory page for code execution and has read + write + execute access.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryAllocation.MemoryAllocationTypes.String">
            <summary>
            The memory is allocated for ANSI or Unicode string.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryAllocation.Free">
            <summary>
            Frees resources.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:NetScriptFramework.InvokeArgument">
            <summary>
            Implement invoke argument for native calls.
            </summary>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.InvokeArgument"/> class.
            </summary>
        </member>
        <member name="F:NetScriptFramework.InvokeArgument.ValueOther">
            <summary>
            The value if it's not floating point.
            </summary>
        </member>
        <member name="F:NetScriptFramework.InvokeArgument.ValueDouble">
            <summary>
            The value if it is floating point.
            </summary>
        </member>
        <member name="F:NetScriptFramework.InvokeArgument.ValueFloat">
            <summary>
            The value if it is floating point.
            </summary>
        </member>
        <member name="F:NetScriptFramework.InvokeArgument.ValueType">
            <summary>
            The value type.
            </summary>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.IntPtr)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.IntPtr"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.Int32)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.Int64)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.UInt32)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.UInt64)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.Int16)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.UInt16)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.Byte)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.SByte)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.Boolean)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.Double)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:NetScriptFramework.InvokeArgument.op_Implicit(System.Single)~NetScriptFramework.InvokeArgument">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:NetScriptFramework.InvokeArgument"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:NetScriptFramework.VTableHookParameters">
            <summary>
            Hook parameters for vtable entry.
            </summary>
        </member>
        <member name="M:NetScriptFramework.VTableHookParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.VTableHookParameters"/> class.
            </summary>
        </member>
        <member name="P:NetScriptFramework.VTableHookParameters.Address">
            <summary>
            Gets or sets the address of the entry in vtable.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:NetScriptFramework.VTableHookParameters.SkipDefaultImplementation">
            <summary>
            Gets or sets a value indicating whether to skip default implementation and not call what was in the vtable before this.
            </summary>
            <value>
            <c>true</c> if [skip default implementation]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetScriptFramework.VTableHookParameters.Before">
            <summary>
            Gets or sets the action to run when hooked code is triggered. This action will run before included code and may read or write CPU registers.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:NetScriptFramework.VTableHookParameters.After">
            <summary>
            Gets or sets the action to run when hooked code is triggered. This action will run after included code and may read or write CPU registers.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="T:NetScriptFramework.HookParameters">
            <summary>
            Parameters for creating a hook.
            </summary>
        </member>
        <member name="M:NetScriptFramework.HookParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.HookParameters"/> class.
            </summary>
        </member>
        <member name="P:NetScriptFramework.HookParameters.Address">
            <summary>
            Gets or sets the start address of hook.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:NetScriptFramework.HookParameters.ReplaceLength">
            <summary>
            Gets or sets the length of the replaced code in bytes. The code is replaced due to placing a hook there. Must be at least 5 bytes in 32-bit process and 13 bytes in 64-bit process. If near jump
            hooking is enabled in the module then it may be 5 bytes also in 64-bit process. Execution of code after hook will resume at "Address + ReplaceLength" unless the "IP" register is modified in
            hook action.
            </summary>
            <value>
            The length of the replaced code.
            </value>
        </member>
        <member name="P:NetScriptFramework.HookParameters.IncludeLength">
            <summary>
            Gets or sets the length of the included code in bytes. This code will be included automatically and be run after the hook action if set. Be careful not to include any location-specific code
            or it will most likely crash the process.
            </summary>
            <value>
            The length of the included code.
            </value>
        </member>
        <member name="P:NetScriptFramework.HookParameters.Pattern">
            <summary>
            Gets or sets the expected pattern at location. If the pattern does not match it will throw an exception. If empty or null then the pattern is ignored.
            </summary>
            <value>
            The pattern.
            </value>
        </member>
        <member name="P:NetScriptFramework.HookParameters.Before">
            <summary>
            Gets or sets the action to run when hooked code is triggered. This action will run before included code and may read or write CPU registers.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:NetScriptFramework.HookParameters.After">
            <summary>
            Gets or sets the action to run when hooked code is triggered. This action will run after included code and may read or write CPU registers.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:NetScriptFramework.HookParameters.ForceLongJump">
            <summary>
            Gets or sets a value indicating whether to force long jump that uses 13 bytes instead of the 5 byte one. This only has any effect in 64 bit mode.
            </summary>
            <value>
              <c>true</c> if [force long jump]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NetScriptFramework.CodePageAllocator">
            <summary>
            Use this for code allocations. VirtualAlloc is used to allocate whole page of memory and is very wasteful for this reason.
            So we use our own backend allocator to use same code page for multiple allocations to save memory.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CodePageAllocator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.CodePageAllocator"/> class.
            </summary>
            <param name="size">The full size of code page.</param>
        </member>
        <member name="F:NetScriptFramework.CodePageAllocator.Size">
            <summary>
            The size of code page.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CodePageAllocator.Get(System.Int32)">
            <summary>
            Gets allocated memory from page with specified size. If the allocation is not possible in this code page this
            function returns null.
            </summary>
            <param name="size">The size of allocation.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.CodePageAllocator.Free(System.IntPtr,System.Int32)">
            <summary>
            Frees previously allocated memory from this code page.
            </summary>
            <param name="addr">The base address of allocation.</param>
            <param name="size">The size of allocation.</param>
        </member>
        <member name="F:NetScriptFramework.CodePageAllocator.Begin">
            <summary>
            The begin pointer of memory page.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CodePageAllocator.End">
            <summary>
            The end pointer of memory page.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CodePageAllocator.Available">
            <summary>
            The available memory ranges.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CodePageAllocator.disposedValue">
            <summary>
            The disposed value to avoid redundant calls.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CodePageAllocator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NetScriptFramework.CodePageAllocator.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NetScriptFramework.CodePageAllocator"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CodePageAllocator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NetScriptFramework.CPURegisters">
            <summary>
            Contains information about CPU registers at a specific location in hooked code.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CPURegisters.#ctor(System.IntPtr,NetScriptFramework.Tools._Internal.HookBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.CPURegisters"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="isFromHook">Is this from hook?</param>
        </member>
        <member name="F:NetScriptFramework.CPURegisters.IsFromHook">
            <summary>
            Is from hook?
            </summary>
        </member>
        <member name="M:NetScriptFramework.CPURegisters.VerifyOffset(System.Int32,System.String)">
            <summary>
            Verifies the offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.AX">
            <summary>
            Gets or sets the value in AX register.
            </summary>
            <value>
            The value in AX register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.BX">
            <summary>
            Gets or sets the value in BX register.
            </summary>
            <value>
            The value in BX register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.CX">
            <summary>
            Gets or sets the value in CX register.
            </summary>
            <value>
            The value in CX register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.DX">
            <summary>
            Gets or sets the value in DX register.
            </summary>
            <value>
            The value in DX register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.DI">
            <summary>
            Gets or sets the value in DI register.
            </summary>
            <value>
            The value in DI register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.SI">
            <summary>
            Gets or sets the value in SI register.
            </summary>
            <value>
            The value in SI register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.BP">
            <summary>
            Gets or sets the value in BP register.
            </summary>
            <value>
            The value in BP register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.SP">
            <summary>
            Gets or sets the value in SP register.
            </summary>
            <value>
            The value in SP register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.FLAGS">
            <summary>
            Gets or sets the value in FLAGS register.
            </summary>
            <value>
            The value in FLAGS register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.IP">
            <summary>
            Gets or sets the IP value. In this context the value means the address where execution of native code will
            continue. Changing this will work like an absolute jump.
            </summary>
            <value>
            The IP value.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.Hook">
            <summary>
            Gets the hooked address. This is the base address where the .NET hook was placed. Returns zero if this is not a hooked call.
            </summary>
            <value>
            The hooked address.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.OriginalHook">
            <summary>
            Gets or sets the original hook.
            </summary>
            <value>
            The original hook.
            </value>
        </member>
        <member name="M:NetScriptFramework.CPURegisters.Skip">
            <summary>
            Skip executing the included assembly code after this hook call.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.Depth">
            <summary>
            Gets the depth of hooked call on current thread. Returns negative value if this is not a hooked call.
            </summary>
            <value>
            The depth.
            </value>
            <exception cref="T:System.NotSupportedException">Depth checking is not supported!</exception>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.Include">
            <summary>
            Gets or sets the include code pointer.
            </summary>
            <value>
            The include.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.AllowSkip">
            <summary>
            Gets or sets a value indicating whether to allow skip.
            </summary>
            <value>
              <c>true</c> if [allow skip]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM0">
            <summary>
            Gets or sets the value in XMM0 register.
            </summary>
            <value>
            The value in XMM0 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM1">
            <summary>
            Gets or sets the value in XMM1 register.
            </summary>
            <value>
            The value in XMM1 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM2">
            <summary>
            Gets or sets the value in XMM2 register.
            </summary>
            <value>
            The value in XMM2 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM3">
            <summary>
            Gets or sets the value in XMM3 register.
            </summary>
            <value>
            The value in XMM3 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM4">
            <summary>
            Gets or sets the value in XMM4 register.
            </summary>
            <value>
            The value in XMM4 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM5">
            <summary>
            Gets or sets the value in XMM5 register.
            </summary>
            <value>
            The value in XMM5 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM6">
            <summary>
            Gets or sets the value in XMM6 register.
            </summary>
            <value>
            The value in XMM6 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM7">
            <summary>
            Gets or sets the value in XMM7 register.
            </summary>
            <value>
            The value in XMM7 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM8">
            <summary>
            Gets or sets the value in XMM8 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM8 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM9">
            <summary>
            Gets or sets the value in XMM9 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM9 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM10">
            <summary>
            Gets or sets the value in XMM10 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM10 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM11">
            <summary>
            Gets or sets the value in XMM11 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM11 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM12">
            <summary>
            Gets or sets the value in XMM12 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM12 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM13">
            <summary>
            Gets or sets the value in XMM13 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM13 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM14">
            <summary>
            Gets or sets the value in XMM14 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM14 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM15">
            <summary>
            Gets or sets the value in XMM15 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM15 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM0f">
            <summary>
            Gets or sets the value in XMM0 register.
            </summary>
            <value>
            The value in XMM0 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM1f">
            <summary>
            Gets or sets the value in XMM1 register.
            </summary>
            <value>
            The value in XMM1 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM2f">
            <summary>
            Gets or sets the value in XMM2 register.
            </summary>
            <value>
            The value in XMM2 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM3f">
            <summary>
            Gets or sets the value in XMM3 register.
            </summary>
            <value>
            The value in XMM3 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM4f">
            <summary>
            Gets or sets the value in XMM4 register.
            </summary>
            <value>
            The value in XMM4 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM5f">
            <summary>
            Gets or sets the value in XMM5 register.
            </summary>
            <value>
            The value in XMM5 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM6f">
            <summary>
            Gets or sets the value in XMM6 register.
            </summary>
            <value>
            The value in XMM6 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM7f">
            <summary>
            Gets or sets the value in XMM7 register.
            </summary>
            <value>
            The value in XMM7 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM8f">
            <summary>
            Gets or sets the value in XMM8 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM8 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM9f">
            <summary>
            Gets or sets the value in XMM9 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM9 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM10f">
            <summary>
            Gets or sets the value in XMM10 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM10 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM11f">
            <summary>
            Gets or sets the value in XMM11 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM11 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM12f">
            <summary>
            Gets or sets the value in XMM12 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM12 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM13f">
            <summary>
            Gets or sets the value in XMM13 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM13 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM14f">
            <summary>
            Gets or sets the value in XMM14 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM14 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.XMM15f">
            <summary>
            Gets or sets the value in XMM15 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in XMM15 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R8">
            <summary>
            Gets or sets the value in R8 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R8 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R9">
            <summary>
            Gets or sets the value in R9 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R9 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R10">
            <summary>
            Gets or sets the value in R10 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R10 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R11">
            <summary>
            Gets or sets the value in R11 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R11 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R12">
            <summary>
            Gets or sets the value in R12 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R12 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R13">
            <summary>
            Gets or sets the value in R13 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R13 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R14">
            <summary>
            Gets or sets the value in R14 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R14 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.R15">
            <summary>
            Gets or sets the value in R15 register. This is not available in 32 bit environment and will throw an
            exception!
            </summary>
            <value>
            The value in R15 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST0">
            <summary>
            Gets or sets the value in ST0 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST0 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST1">
            <summary>
            Gets or sets the value in ST1 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST1 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST2">
            <summary>
            Gets or sets the value in ST2 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST2 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST3">
            <summary>
            Gets or sets the value in ST3 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST3 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST4">
            <summary>
            Gets or sets the value in ST4 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST4 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST5">
            <summary>
            Gets or sets the value in ST5 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST5 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST6">
            <summary>
            Gets or sets the value in ST6 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST6 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.ST7">
            <summary>
            Gets or sets the value in ST7 register. If STCount is less or equal to the number at index then this will
            throw an exception! This is only available in 32-bit at the moment.
            </summary>
            <value>
            The value in ST7 register.
            </value>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.STCount">
            <summary>
            Gets the count of values in x87 FPU stack. This is only available in 32-bit at the moment.
            </summary>
            <value>
            The count of x87 FPU stack.
            </value>
        </member>
        <member name="M:NetScriptFramework.CPURegisters.WriteToLog">
            <summary>
            Writes debug info to log.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CPURegisters.Address">
            <summary>
            The base address of allocation.
            </summary>
        </member>
        <member name="F:NetScriptFramework.CPURegisters.Offsets">
            <summary>
            The offsets of unmanaged memory.
            </summary>
        </member>
        <member name="P:NetScriptFramework.CPURegisters.SizeOf">
            <summary>
            Gets the size of CPU registers struct.
            </summary>
            <value>
            The size of.
            </value>
        </member>
        <member name="T:NetScriptFramework.CPURegisters.CPUOffsets">
            <summary>
            Container for offsets in the unmanaged memory.
            </summary>
        </member>
        <member name="M:NetScriptFramework.CPURegisters.CPUOffsets.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.CPURegisters.CPUOffsets"/> class.
            </summary>
        </member>
        <member name="T:NetScriptFramework._IntPtrExtensions">
            <summary>
            Extension helper functions for IntPtr class.
            </summary>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToHexString(System.IntPtr)">
            <summary>
            Convert pointer to hex string (including prefix).
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToBool(System.IntPtr)">
            <summary>
            Converts the value of this instance to a boolean.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToUInt8(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 8-bit unsigned integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToInt8(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 8-bit signed integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToChar(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 16-bit unicode character.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToInt16(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 16-bit signed integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToUInt16(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 16-bit unsigned integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToUInt32(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 32-bit unsigned integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToInt32Safe(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 32-bit signed integer but ignores overflow and does not throw any exceptions.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToUInt64(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 64-bit unsigned integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">Unable to cast a pointer to a 64-bit unsigned integer!</exception>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToSingle(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 32-bit floating point value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToDouble(System.IntPtr)">
            <summary>
            Converts the value of this instance to a 64-bit floating point value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">Unable to cast a pointer to a 64-bit floating point value!</exception>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.ToInternal32(System.IntPtr)">
            <summary>
            Get internal value that we can convert from.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework._IntPtrExtensions.CompareTo(System.IntPtr,System.IntPtr)">
            <summary>
            Compares a pointer with another.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.MemoryAccessException">
            <summary>
            Custom class for handling memory access exceptions.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:NetScriptFramework.MemoryAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryAccessException"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryAccessException.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryAccessException"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="length">The length.</param>
            <param name="protectForRead">The protect for read.</param>
        </member>
        <member name="M:NetScriptFramework.MemoryAccessException.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryAccessException"/> class.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:NetScriptFramework.MemoryAccessException.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryAccessException"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:NetScriptFramework.MemoryAccessException.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryAccessException"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="length">The length.</param>
            <param name="write">if set to <c>true</c> [write].</param>
        </member>
        <member name="M:NetScriptFramework.MemoryAccessException.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryAccessException"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="write">if set to <c>true</c> [write].</param>
        </member>
        <member name="T:NetScriptFramework.MemoryArrayBase">
            <summary>
            Base array of values.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryArrayBase.Address">
            <summary>
            Gets the base address of array entries.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryArrayBase.Length">
            <summary>
            Gets the length of array (count of entries).
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:NetScriptFramework.MemoryArrayBase.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="maxEntries">The maximum entries.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:NetScriptFramework.MemoryArray`1">
            <summary>
            Array of values.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:NetScriptFramework.MemoryArrayBase" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="P:NetScriptFramework.MemoryArray`1.Handler">
            <summary>
            Gets the array handler.
            </summary>
            <value>
            The handler.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <value>
            The value.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Index must not be negative!
            or
            Index must not exceed the length of array!
            or
            Index must not be negative!
            or
            Index must not exceed the length of array!
            </exception>
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:NetScriptFramework.MemoryArray`1.enumerator">
            <summary>
            The enumerator implementation.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryArrayBase" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.enumerator.#ctor(NetScriptFramework.MemoryArray{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryArray`1.enumerator"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="F:NetScriptFramework.MemoryArray`1.enumerator.Array">
            <summary>
            The array.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryArray`1.enumerator.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryArray`1.enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryArray`1.enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NetScriptFramework.MemoryArray`1.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="maxEntries">The maximum entries to show.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:NetScriptFramework.FixedMemoryArray`1">
            <summary>
            Fixed size array of objects.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:NetScriptFramework.MemoryArray`1" />
        </member>
        <member name="M:NetScriptFramework.FixedMemoryArray`1.#ctor(NetScriptFramework.MemoryArrayTypeHandler{`0},System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.FixedMemoryArray`1" /> class.
            </summary>
            <param name="handler">The handler.</param>
            <param name="address">The address.</param>
            <param name="length">The length.</param>
            <exception cref="T:System.ArgumentNullException">handler</exception>
        </member>
        <member name="P:NetScriptFramework.FixedMemoryArray`1.Handler">
            <summary>
            Gets the array handler.
            </summary>
            <value>
            The handler.
            </value>
        </member>
        <member name="P:NetScriptFramework.FixedMemoryArray`1.Length">
            <summary>
            Gets the length of array (count of entries).
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:NetScriptFramework.MemoryArrayTypeHandlerBase">
            <summary>
            Base type handler of array.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryArrayTypeHandlerBase.Stride">
            <summary>
            Gets the stride of one entry in the array.
            </summary>
            <value>
            The stride.
            </value>
        </member>
        <member name="T:NetScriptFramework.MemoryArrayTypeHandler`1">
            <summary>
            Type handler for array.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:NetScriptFramework.MemoryArrayTypeHandlerBase" />
        </member>
        <member name="M:NetScriptFramework.MemoryArrayTypeHandler`1.Read(System.IntPtr,System.Int32)">
            <summary>
            Reads the specified entry from array.
            </summary>
            <param name="arrayBase">The array base.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryArrayTypeHandler`1.Write(System.IntPtr,System.Int32,`0)">
            <summary>
            Writes the specified entry to array.
            </summary>
            <param name="arrayBase">The array base.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NetScriptFramework.MemoryArrayTypeHandler`1.GetText(`0)">
            <summary>
            Gets the text.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.MemoryObject">
            <summary>
            Base implementation of a wrapper for an object that exists in memory.
            </summary>
            <seealso cref="T:NetScriptFramework.IMemoryObject" />
            <seealso cref="T:NetScriptFramework.Tools.IArgument" />
        </member>
        <member name="P:NetScriptFramework.MemoryObject.Address">
            <summary>
            Gets the base address of the object in memory.
            </summary>
            <value>
            The base address of object in memory.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryObject.IsValid">
            <summary>
            Returns true if memory object is valid and can be accessed for reading. It is possible for this to return true even if
            the object is not actually valid in case of bad pointers to valid memory regions, invalid cast or partially freed memory!
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryObject.TypeInfo">
            <summary>
            Gets the type instance information of this complete type.
            </summary>
            <value>
            The type instance information of the complete type.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryObject.TypeId">
            <summary>
            Gets the type identifier of this complete type. This will be zero if not available.
            </summary>
            <value>
            The type identifier of the complete type.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryObject.TypeInfos">
            <summary>
            Gets all the type infos of this complete type.
            </summary>
            <value>
            The type infos.
            </value>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.FromAddress``1(System.IntPtr)">
            <summary>
            Get an object in memory from specified base address.
            </summary>
            <typeparam name="T">Type of object to get.</typeparam>
            <param name="address">The base address of object.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.FromAddress(System.Type,System.IntPtr)">
            <summary>
            Get an object in memory from specified base address.
            </summary>
            <param name="t">The type of object.</param>
            <param name="address">The address.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">t</exception>
            <exception cref="T:System.ArgumentException">
            Type can not be abstract!
            or
            Type must inherit from MemoryObject!
            </exception>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.FromAddress(System.UInt64,System.IntPtr)">
            <summary>
            Get an object in memory from specified base address.
            </summary>
            <param name="vid">The unique ID of type.</param>
            <param name="address">The address.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Type can not be abstract!
            or
            Type must inherit from MemoryObject!</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Type with id  + vid +  was not found!</exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.Cast``1">
            <summary>
            Returns the address if this instance was cast into another type. Returns zero if not possible to cast.
            </summary>
            <typeparam name="T">Type to cast to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.VTable``1">
            <summary>
            Returns the virtual function table address of specified instance. It will return zero if not possible to get this virtual function table or the virtual function table is itself zero.
            </summary>
            <typeparam name="T">Type to get table for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.GatherObjectsForCrashLog(NetScriptFramework.InterestingCrashLogObjects)">
            <summary>
            Gathers the objects for crash log.
            </summary>
            <param name="gatherer">The gatherer.</param>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.GatherStringForCrashLog">
            <summary>
            Gathers the string for crash log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance. If the specified object
            is not a <see cref="T:NetScriptFramework.MemoryObject" /> or is null then this method will return false!
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.Equals(NetScriptFramework.IMemoryObject)">
            <summary>
            Determines whether the specified <see cref="T:NetScriptFramework.IMemoryObject" />, is equal to this instance. If the specified object
            is not a <see cref="T:NetScriptFramework.IMemoryObject" /> or is null then this method will return false!
            </summary>
            <param name="obj">The <see cref="T:NetScriptFramework.IMemoryObject" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:NetScriptFramework.IMemoryObject" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.ParseArgument(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse an argument from this object.
            </summary>
            <param name="key">Keyword for argument.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.ParseVariable(System.String,NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a variable from this object.
            </summary>
            <param name="key">Keyword for variable.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject.ParseFunction(System.String,System.String[],NetScriptFramework.Tools.Message,NetScriptFramework.Tools.Parser)">
            <summary>
            Parse a function from this object.
            </summary>
            <param name="key">Keyword for function.</param>
            <param name="args">Arguments for function.</param>
            <param name="message">Message to parse for.</param>
            <param name="parser">Parser that is currently processing message.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryObject._GetProperty(System.String)">
            <summary>
            Get a property of this object by its name.
            </summary>
            <param name="name">The name of property.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.IMemoryObject">
            <summary>
            Base implementation of a wrapper for an object that exists in memory. Use the Equals methods to check
            equality with another object rather than equality operator.
            </summary>
        </member>
        <member name="P:NetScriptFramework.IMemoryObject.Address">
            <summary>
            Gets the base address of the complete object in memory.
            </summary>
            <value>
            The base address of object in memory.
            </value>
        </member>
        <member name="P:NetScriptFramework.IMemoryObject.IsValid">
            <summary>
            Returns true if memory object is valid and can be accessed. It is possible for this to return true even if
            the object is not actually valid in case of bad pointers or freed memory!
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetScriptFramework.IMemoryObject.TypeInfo">
            <summary>
            Gets the type instance information of this complete type.
            </summary>
            <value>
            The type instance information of the complete type.
            </value>
        </member>
        <member name="P:NetScriptFramework.IMemoryObject.TypeId">
            <summary>
            Gets the type identifier of this complete type. This will be zero if not available.
            </summary>
            <value>
            The type identifier of the complete type.
            </value>
        </member>
        <member name="P:NetScriptFramework.IMemoryObject.TypeInfos">
            <summary>
            Gets all the type infos of this complete type.
            </summary>
            <value>
            The type infos.
            </value>
        </member>
        <member name="M:NetScriptFramework.IMemoryObject.Cast``1">
            <summary>
            Returns the address if this instance was cast into another type. Returns zero if not possible to cast.
            </summary>
            <typeparam name="T">Type to cast to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.IMemoryObject.VTable``1">
            <summary>
            Returns the virtual function table address of specified instance. It will return zero if not possible to get this virtual function table or the virtual function table is itself zero.
            </summary>
            <typeparam name="T">Type to get table for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.IMemoryObject.GatherObjectsForCrashLog(NetScriptFramework.InterestingCrashLogObjects)">
            <summary>
            Gathers the objects for crash log.
            </summary>
            <param name="gatherer">The gatherer.</param>
        </member>
        <member name="M:NetScriptFramework.IMemoryObject.GatherStringForCrashLog">
            <summary>
            Gathers the string for crash log.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.unknown">
            <summary>
            This is an unknown type.
            </summary>
            <seealso cref="T:NetScriptFramework.IMemoryObject" />
        </member>
        <member name="T:NetScriptFramework.impl_unknown">
            <summary>
            The implementation for unknown type.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryObject" />
        </member>
        <member name="P:NetScriptFramework.impl_unknown.TypeInfos">
            <summary>
            Gets all the type infos of this complete type.
            </summary>
            <value>
            The type infos.
            </value>
        </member>
        <member name="F:NetScriptFramework.impl_unknown._TypeInfos">
            <summary>
            The type info.
            </summary>
        </member>
        <member name="M:NetScriptFramework.impl_unknown.Cast``1">
            <summary>
            Returns the address if this instance was cast into another type. Returns zero if not possible to cast.
            </summary>
            <typeparam name="T">Type to cast to.</typeparam>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.VoidGenericArgument">
            <summary>
            This is a void generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.IMemoryObject" />
        </member>
        <member name="T:NetScriptFramework.impl_VoidGenericArgument">
            <summary>
            The implementation for void generic argument.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryObject" />
        </member>
        <member name="P:NetScriptFramework.impl_VoidGenericArgument.TypeInfos">
            <summary>
            Gets all the type infos of this complete type.
            </summary>
            <value>
            The type infos.
            </value>
        </member>
        <member name="F:NetScriptFramework.impl_VoidGenericArgument._TypeInfos">
            <summary>
            The type info.
            </summary>
        </member>
        <member name="M:NetScriptFramework.impl_VoidGenericArgument.Cast``1">
            <summary>
            Returns the address if this instance was cast into another type. Returns zero if not possible to cast.
            </summary>
            <typeparam name="T">Type to cast to.</typeparam>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.MemoryParser">
            <summary>
            Parse a memory value from string.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.MemoryParser" /> class.
            </summary>
            <param name="formula">The formula.</param>
            <exception cref="T:System.ArgumentNullException">formula</exception>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.Formula">
            <summary>
            The formula to parse.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.Root">
            <summary>
            The root block.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.Modules">
            <summary>
            The modules.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.Build">
            <summary>
            Builds this instance.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.Evaluate(NetScriptFramework.CPURegisters)">
            <summary>
            Evaluates the value from specified cpu.
            </summary>
            <param name="cpu">The cpu.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">this.Formula</exception>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.Statement">
            <summary>
            Base statement.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.Statement.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.Statement.Consumes">
            <summary>
            Gets the amount of stack consumed.
            </summary>
            <value>
            The consumes.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.Statement.Produces">
            <summary>
            Gets the amount of stack produced.
            </summary>
            <value>
            The produces.
            </value>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementRegister">
            <summary>
            Accesses registers of CPU.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.Statement" />
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementRegister.#cctor">
            <summary>
            Initializes the <see cref="T:NetScriptFramework.MemoryParser.StatementRegister"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementRegister.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NetScriptFramework.MemoryParser.StatementRegister"/> class from being created.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementRegister.Consumes">
            <summary>
            Gets the amount of stack consumed.
            </summary>
            <value>
            The consumes.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementRegister.Produces">
            <summary>
            Gets the amount of stack produced.
            </summary>
            <value>
            The produces.
            </value>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementRegister.Func">
            <summary>
            The function to access.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementRegister.Create(System.String,System.Int32@)">
            <summary>
            Creates the statement from specified input. Returns null if not register access.
            </summary>
            <param name="input">The input.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementRegister.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementRegister.Registers">
            <summary>
            The registers with their accessors.
            </summary>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementBlock">
            <summary>
            Handles a group of statements.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.Statement" />
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementBlock.Statements">
            <summary>
            The statements list.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementBlock.Parent">
            <summary>
            The parent, this may be null if root.
            </summary>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementBlock.One">
            <summary>
            Grouped statements into one.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementBlock.Consumes">
            <summary>
            Gets the amount of stack consumed.
            </summary>
            <value>
            The consumes.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementBlock.Produces">
            <summary>
            Gets the amount of stack produced.
            </summary>
            <value>
            The produces.
            </value>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementBlock.Finish">
            <summary>
            Finishes this instance.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementBlock.ImplementOperators">
            <summary>
            Implements the operators.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementBlock.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementGroup">
            <summary>
            Statement group (parenthesis).
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.StatementBlock" />
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementRead">
            <summary>
            Tries to read the value at statement.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.StatementBlock" />
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementRead.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementOperator">
            <summary>
            Operator parser.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.Statement" />
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementOperator.Consumes">
            <summary>
            Gets the amount of stack consumed.
            </summary>
            <value>
            The consumes.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementOperator.Produces">
            <summary>
            Gets the amount of stack produced.
            </summary>
            <value>
            The produces.
            </value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementOperator.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementOperator.Create(System.String,System.Int32@)">
            <summary>
            Creates the operator from specified input. Returns null if couldn't parse.
            </summary>
            <param name="input">The input.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementOperator.Operators">
            <summary>
            The operators.
            </summary>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementOperatorImpl">
            <summary>
            Implementation of operator.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.Statement" />
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementOperatorImpl.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementOperatorImpl.Consumes">
            <summary>
            Gets the amount of stack consumed.
            </summary>
            <value>
            The consumes.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementOperatorImpl.Produces">
            <summary>
            Gets the amount of stack produced.
            </summary>
            <value>
            The produces.
            </value>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementConstant">
            <summary>
            Constant value.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.Statement" />
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementConstant.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NetScriptFramework.MemoryParser.StatementConstant"/> class from being created.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementConstant.Consumes">
            <summary>
            Gets the amount of stack consumed.
            </summary>
            <value>
            The consumes.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementConstant.Produces">
            <summary>
            Gets the amount of stack produced.
            </summary>
            <value>
            The produces.
            </value>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementConstant.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementConstant.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementConstant.Create(System.String,System.Int32@)">
            <summary>
            Creates the constant from specified input. Returns null if couldn't parse.
            </summary>
            <param name="input">The input.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:NetScriptFramework.MemoryParser.StatementModule">
            <summary>
            Module base value.
            </summary>
            <seealso cref="T:NetScriptFramework.MemoryParser.Statement" />
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementModule.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NetScriptFramework.MemoryParser.StatementModule"/> class from being created.
            </summary>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementModule.Consumes">
            <summary>
            Gets the amount of stack consumed.
            </summary>
            <value>
            The consumes.
            </value>
        </member>
        <member name="P:NetScriptFramework.MemoryParser.StatementModule.Produces">
            <summary>
            Gets the amount of stack produced.
            </summary>
            <value>
            The produces.
            </value>
        </member>
        <member name="F:NetScriptFramework.MemoryParser.StatementModule.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementModule.Process(NetScriptFramework.CPURegisters,NetScriptFramework.MemoryParser.StatementBlock,System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Processes the statement with specified cpu context. Returns false if we couldn't read due to invalid memory address.
            </summary>
            <param name="cpu">The cpu.</param>
            <param name="parent">The parent.</param>
            <param name="stack">The stack.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.StatementModule.Create(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.IntPtr}},System.String,System.Int32@)">
            <summary>
            Creates the module from specified input. Returns null if couldn't parse.
            </summary>
            <param name="ls">Module list.</param>
            <param name="input">The input.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.Parse(NetScriptFramework.MemoryParser.StatementBlock@,System.String@)">
            <summary>
            Parses the input for specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="input">The input.</param>
            <returns></returns>
            <exception cref="T:System.FormatException">
            Unexpected ']'!
            or
            Unexpected ')'!
            or
            Unexpected input:  + input + !
            </exception>
        </member>
        <member name="M:NetScriptFramework.MemoryParser.Op(System.IntPtr,System.Func{System.UInt64,System.UInt64})">
            <summary>
            Apply arithmetic operation to pointer.
            </summary>
            <param name="ptr">The pointer.</param>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Plugin">
            <summary>
            Implement base plugin class. All loaded plugins must inherit from this and provide plugin header information.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Plugin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Plugin"/> class. Don't put any initialization code in constructor! If you
            need to initialize your plugin then override the Initialize method instead.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Plugin.Key">
            <summary>
            Gets the unique keyword of plugin.<para></para><para></para>For developers: Other plugins may query plugin
            manager for your plugin using this keyword. This is not case sensitive! It is advisable to keep this short
            and simple phrase but unique enough that other plugin authors would not choose it.
            </summary>
            <value>
            The unique key of plugin.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.Name">
            <summary>
            Gets the name of plugin.<para></para><para></para>For developers: This is what will be shown to user and in
            the log files. This does not have to be unique but it should be informative enough to let user know what mod
            this is from.
            </summary>
            <value>
            The name of plugin.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.Version">
            <summary>
            Gets the version of plugin.<para></para><para></para>For developers: Current version of your plugin. It is
            advisable to start with "1" and increment as your plugin's version is increased. You can also use a custom
            versioning scheme as long as it fits in the integer. You should at least make your scheme comparable, so that
            new version number is always greater than older version when sorted or compared.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.Author">
            <summary>
            Gets the author's name of plugin.<para></para><para></para>For developers: Set author's name or nickname here.
            It is optional, the default value will return "Unknown" if not overrided.
            </summary>
            <value>
            The author.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.Website">
            <summary>
            Gets the website of plugin.<para></para><para></para>For developers: Set website of your plugin here. This is where
            users could check for newer versions or get support in case of issues. It is optional and the default value will return
            empty string if not overrided.
            </summary>
            <value>
            The website of plugin.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.RequiredFrameworkVersion">
            <summary>
            Gets the required framework version.
            </summary>
            <value>
            The required framework version.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.RequiredLibraryVersion">
            <summary>
            Gets the required library version.
            </summary>
            <value>
            The required library version.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.IsInitialized">
            <summary>
            Gets a value indicating whether Initialize has been called successfully on this plugin instance.
            </summary>
            <value>
            <c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetScriptFramework.Plugin.Assembly">
            <summary>
            Gets the assembly associated with this plugin. This is the assembly where the plugin type header was found.
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="M:NetScriptFramework.Plugin.Initialize(System.Boolean)">
            <summary>
            Initializes the plugin instance. Perform your plugin initialization here. If you return false then
            you will let plugin manager know that other plugins should be initialized first. The plugin manager will
            return to your plugin (and any others that returned false this pass) in the next pass. If no plugins were
            loaded in a pass then the argument "loadedAny" will be false. If all plugins in a pass still return false
            then the plugin manager will fail to load and an error will be displayed to user, forcing the game to exit.
            If you don't need to perform any initialization for your plugin then you can skip overriding this method
            or simply return <c>true</c>. Plugins are initialized before static initialization occurs in the application!
            </summary>
            <param name="loadedAny">If set to <c>true</c> then we did load at least one plugin last pass. It is safe
            to return false now and try again next pass. If this is set to <c>false</c> then all plugins in the last pass
            also returned false and if that happens again the game will close with an error.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Plugin.Shutdown">
            <summary>
            Shutdowns this plugin instance. Perform any cleanup you need to do here. At this point the application is
            about to exit, it is not necessary to release resources unless you have pending buffers. It is also not
            necessary to close log files inheriting from <see cref="T:NetScriptFramework.Tools.LogFile"/> as this is
            done automatically a little while later. This method is not guaranteed to be called in every scenario!
            If the application crashes or doesn't have a exit hook in place then this method will not be called.
            This method is also not called if the initialization of plugin has not completed successfully.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Plugin.OnDetachThread">
            <summary>
            Called when detaching from thread. This is used mostly only to clean up stuff from memory if you used thread-local storage.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Plugin.GetInternalString">
            <summary>
            Gets the internal string to display in log about the plugin.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Plugin.InternalName">
            <summary>
            Gets the name of plugin for internal use.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Plugin.InternalVersion">
            <summary>
            Gets the version of plugin for internal use.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Plugin.InternalKey">
            <summary>
            Gets the key of plugin for internal use.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Plugin.InternalIndex">
            <summary>
            Gets or sets the internal plugin index.
            </summary>
            <value>
            The internal index of plugin.
            </value>
        </member>
        <member name="T:NetScriptFramework.PluginManager">
            <summary>
            This class will load, initialize and shutdown plugins when necessary. You can also query for a plugin or
            get a list of all loaded plugins.
            </summary>
        </member>
        <member name="M:NetScriptFramework.PluginManager.GetPlugin(System.String)">
            <summary>
            Gets a plugin by its unique key. The key is not case sensitive. If the plugin was not found then
            it will return null.
            </summary>
            <param name="key">The unique key of plugin. This is not case sensitive.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:NetScriptFramework.PluginManager.GetPlugin``1">
            <summary>
            Gets a plugin by type.
            </summary>
            <typeparam name="T">Type of plugin to get.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.PluginManager.GetPlugin(System.Reflection.Assembly)">
            <summary>
            Gets the plugin by its assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.PluginManager.GetPlugins">
            <summary>
            Gets a list of all the plugins.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.PluginManager.Initialize">
            <summary>
            Initializes this instance and all the plugins.
            </summary>
        </member>
        <member name="M:NetScriptFramework.PluginManager.ProcessFile(System.IO.FileInfo,System.Collections.Generic.Dictionary{System.String,NetScriptFramework.Plugin})">
            <summary>
            Processes the file for plugin loading.
            </summary>
            <param name="file">The file.</param>
            <param name="plugins">The plugins.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="F:NetScriptFramework.PluginManager.HighPluginIndex">
            <summary>
            The high plugin index.
            </summary>
        </member>
        <member name="M:NetScriptFramework.PluginManager.Shutdown">
            <summary>
            Shutdowns this instance and all the plugins.
            </summary>
        </member>
        <member name="M:NetScriptFramework.PluginManager.DetachThread">
            <summary>
            Detaches from the thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.PluginManager.AttachThread">
            <summary>
            Attaches to the thread.
            </summary>
        </member>
        <member name="F:NetScriptFramework.PluginManager.Plugins">
            <summary>
            The plugins list.
            </summary>
        </member>
        <member name="F:NetScriptFramework.PluginManager.CreatingPlugin">
            <summary>
            Allow creating plugin now.
            </summary>
        </member>
        <member name="T:NetScriptFramework.TemporaryObject">
            <summary>
            Temporary object that will clean up resources when disposed.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:NetScriptFramework.TemporaryObject.Pinned">
            <summary>
            The pinned state.
            </summary>
        </member>
        <member name="M:NetScriptFramework.TemporaryObject.Pin">
            <summary>
            Pins this object and prevents it from being freed automatically when the instance is disposed.
            </summary>
        </member>
        <member name="M:NetScriptFramework.TemporaryObject.Unpin">
            <summary>
            Unpins this object and allows the underlying resources to be freed when this instance is disposed.
            </summary>
        </member>
        <member name="M:NetScriptFramework.TemporaryObject.Free">
            <summary>
            Frees resources.
            </summary>
        </member>
        <member name="F:NetScriptFramework.TemporaryObject.disposedValue">
            <summary>
            Internal value to avoid redundant calls.
            </summary>
        </member>
        <member name="M:NetScriptFramework.TemporaryObject.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NetScriptFramework.TemporaryObject.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:NetScriptFramework.TemporaryObject"/> class.
            </summary>
        </member>
        <member name="M:NetScriptFramework.TemporaryObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:NetScriptFramework.VirtualObject">
            <summary>
            Base implementation of a type that has a virtual table.
            </summary>
            <seealso cref="T:NetScriptFramework.IVirtualObject" />
            <seealso cref="T:NetScriptFramework.MemoryObject" />
        </member>
        <member name="M:NetScriptFramework.VirtualObject.InvokeVTableThisCall``1(System.Int32,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function from the virtual table of this object.
            </summary>
            <param name="offset">The offset of function in the virtual table.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.VirtualObject.InvokeVTableThisCallF``1(System.Int32,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function that returns a floating point value from the virtual table of this object.
            </summary>
            <param name="offset">The offset of function in the virtual table.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.VirtualObject.InvokeVTableThisCallD``1(System.Int32,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function that returns a floating point value from the virtual table of this object.
            </summary>
            <param name="offset">The offset of function in the virtual table.</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.VirtualObject.FromAddress(System.IntPtr)">
            <summary>
            Gets an object from memory of an unknown type. Returns null if unable to identify or not a valid object. The returned object may be invalid because it only checks virtual function table address!
            </summary>
            <param name="address">The address.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Game library is not loaded! Unable to use types.</exception>
        </member>
        <member name="T:NetScriptFramework.IVirtualObject">
            <summary>
            Base implementation of a type that has a virtual table.
            </summary>
            <seealso cref="T:NetScriptFramework.IMemoryObject" />
        </member>
        <member name="M:NetScriptFramework.IVirtualObject.InvokeVTableThisCall``1(System.Int32,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function from the virtual table of this object.
            </summary>
            <param name="offset">The offset of function in the virtual table. This is not the index!</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.IVirtualObject.InvokeVTableThisCallF``1(System.Int32,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function that returns a floating point value from the virtual table of this object.
            </summary>
            <param name="offset">The offset of function in the virtual table. This is not the index!</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.IVirtualObject.InvokeVTableThisCallD``1(System.Int32,NetScriptFramework.InvokeArgument[])">
            <summary>
            Invokes a "thiscall" native function that returns a floating point value from the virtual table of this object.
            </summary>
            <param name="offset">The offset of function in the virtual table. This is not the index!</param>
            <param name="args">The arguments of function.</param>
            <returns></returns>
        </member>
        <member name="T:NetScriptFramework.Main">
            <summary>
            Implement framework runtime methods. This will deal with initialization and shutdown.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.FrameworkName">
            <summary>
            The name of running framework.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.FrameworkVersion">
            <summary>
            The version of running framework.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.RequiredRuntimeVersion">
            <summary>
            The required runtime version.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Main.FrameworkAssembly">
            <summary>
            Gets the framework assembly.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Main.Game">
            <summary>
            Gets the game instance. This will contain type implementations and interfaces. If no valid game instance is found this will be null, plugins may still be loaded into an unknown process.
            </summary>
            <value>
            The game instance or null.
            </value>
        </member>
        <member name="P:NetScriptFramework.Main.GameInfo">
            <summary>
            Gets the game version library. This will contain information about types, offsets, functions. If no version information is loaded it will be null and we will not be able to provide
            information about process to plugins.
            </summary>
            <value>
            The game information.
            </value>
        </member>
        <member name="P:NetScriptFramework.Main.Is64Bit">
            <summary>
            Gets a value indicating whether this process is currently running in 64 bit mode.
            </summary>
            <value>
              <c>true</c> if this is 64 bit process; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetScriptFramework.Main.Config">
            <summary>
            Gets the main framework configuration file.
            </summary>
            <value>
            The main framework configuration.
            </value>
        </member>
        <member name="P:NetScriptFramework.Main.Log">
            <summary>
            Gets the main framework log file.
            </summary>
            <value>
            The main framework log.
            </value>
        </member>
        <member name="P:NetScriptFramework.Main.TrashMemory">
            <summary>
            Gets a pointer to a valid memory region, usable for any purpose. Size is 1 KB. Not thread safe!
            </summary>
            <value>
            The trash memory.
            </value>
        </member>
        <member name="M:NetScriptFramework.Main.CriticalException(System.Exception,System.Boolean)">
            <summary>
            Stops the application, displays an error message box and exits after user has clicked Ok.
            </summary>
            <param name="e">The exception to display.</param>
            <param name="kill">Should we kill the process or exit normally.</param>
        </member>
        <member name="M:NetScriptFramework.Main.CriticalException(System.String,System.Boolean)">
            <summary>
            Stops the application, displays an error message box and exits after user has clicked Ok.
            </summary>
            <param name="message">The message to display.</param>
            <param name="kill">Should we kill the process or exit normally.</param>
        </member>
        <member name="M:NetScriptFramework.Main.GenerateGuid">
            <summary>
            Generates a unique identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Main.GetRuntimeVersion">
            <summary>
            Gets the runtime version.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NetScriptFramework.Main.FrameworkPath">
            <summary>
            Gets the framework path.
            </summary>
            <value>
            The framework path.
            </value>
        </member>
        <member name="T:NetScriptFramework.Main.FrameworkInitializationParameters">
            <summary>
            Parameters for initializing the framework. This is only used by the C runtime DLL.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.FrameworkInitializationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NetScriptFramework.Main.FrameworkInitializationParameters"/> class.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Main.FrameworkInitializationParameters.FrameworkPath">
            <summary>
            Gets or sets the framework path.
            </summary>
            <value>
            The framework path.
            </value>
        </member>
        <member name="P:NetScriptFramework.Main.FrameworkInitializationParameters.DelayedInitialize">
            <summary>
            Gets or sets the delayed initialize. If this is greater than zero it will create a new thread that will initialize after this many milliseconds.
            </summary>
            <value>
            The delayed initialize.
            </value>
        </member>
        <member name="M:NetScriptFramework.Main.Initialize(NetScriptFramework.Main.FrameworkInitializationParameters)">
            <summary>
            Initializes the framework.
            </summary>
            <param name="p">The parameters.</param>
        </member>
        <member name="F:NetScriptFramework.Main._saved_p">
            <summary>
            The saved parameters.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main._Run_Delayed_Initialize">
            <summary>
            Runs the delayed initialization on another thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main._Initialize_Actual(NetScriptFramework.Main.FrameworkInitializationParameters)">
            <summary>
            Perform the actual initialization.
            </summary>
            <param name="p">The parameters.</param>
        </member>
        <member name="P:NetScriptFramework.Main.IsShutdown">
            <summary>
            Gets a value indicating whether this instance is shutdown.
            </summary>
            <value>
            <c>true</c> if this instance is shutdown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NetScriptFramework.Main.Shutdown">
            <summary>
            Shuts the framework down.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.CurrentDomain_ProcessExit(System.Object,System.EventArgs)">
            <summary>
            Handles the ProcessExit event of the CurrentDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NetScriptFramework.Main.OnDetachThread">
            <summary>
            Called when detached thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.OnAttachThread">
            <summary>
            Called when attached thread.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handles the UnhandledException event of the CurrentDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NetScriptFramework.Main.ProcessManagedUnhandledException(System.Exception)">
            <summary>
            Processes the managed unhandled exception.
            </summary>
            <param name="ex">The exception object.</param>
        </member>
        <member name="M:NetScriptFramework.Main.UnhandledExceptionFilter(NetScriptFramework.CPURegisters)">
            <summary>
            Unhandled exception filter.
            </summary>
            <param name="cpu">The cpu context.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Main.WriteNativeCrashLog(NetScriptFramework.CPURegisters,System.Int32,System.String)">
            <summary>
            Writes the native crash log for specified context. It does not actually treat this as a crash, it just writes out to file as if this was a crash.
            Warning: plugins may still treat this as a crash and modify registers or perform functions that would happen on crash!
            </summary>
            <param name="cpu">The cpu context.</param>
            <param name="nativeThreadId">The native thread identifier. Set int.MinValue for current thread.</param>
            <param name="filePath">The file path to write to (including file name). If file exists it will append.</param>
            <exception cref="T:System.ArgumentNullException">cpu</exception>
        </member>
        <member name="P:NetScriptFramework.Main.IsInitializing">
            <summary>
            Gets a value indicating whether plugins are being initialized right now.
            </summary>
            <value>
            <c>true</c> if plugins are initializing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NetScriptFramework.Main._is_initializing_plugin">
            <summary>
            Gets or sets the internal value of plugin initialize state.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.DebugListeners">
            <summary>
            The debug listeners.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.DebugLocker">
            <summary>
            The debug locker.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.HasDebugListeners">
            <summary>
            Has debug listeners.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.AddDebugMessageListener(NetScriptFramework.DebugMessageListener)">
            <summary>
            Adds the debug message listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:NetScriptFramework.Main.RemoveDebugMessageListener(NetScriptFramework.DebugMessageListener)">
            <summary>
            Removes the debug message listener.
            </summary>
            <param name="listener">The listener.</param>
            <returns></returns>
        </member>
        <member name="M:NetScriptFramework.Main.WriteDebugMessage(System.String)">
            <summary>
            Writes the debug message. If there are any debug listeners registered they will capture it.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NetScriptFramework.Main.GetMainTargetedModule">
            <summary>
            Gets the main targeted module.
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.FileNotFoundException">Main targeted module was not found in process!</exception>
        </member>
        <member name="F:NetScriptFramework.Main.Status">
            <summary>
            The status of framework.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.EnvironmentType">
            <summary>
            The environment type.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.GameCreate">
            <summary>
            Value saying whether game info creation is allowed now.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.IDGenerator">
            <summary>
            The identifier generator.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.InitializeLog">
            <summary>
            Initializes the log file.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.PrepareConfiguration">
            <summary>
            Prepares the configuration instance. This doesn't load from file automatically!
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.LoadGameInfo">
            <summary>
            Loads the game information.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.InitializeVersionInfo">
            <summary>
            Initializes the version info library.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main.VersionLibraryFile">
            <summary>
            The version library file.
            </summary>
        </member>
        <member name="P:NetScriptFramework.Main.VersionLibraryError">
            <summary>
            The version library error.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.ValidateVersionLibrary">
            <summary>
            Validates the version library.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.GetTypeInfo(System.UInt64,System.Boolean)">
            <summary>
            Gets the type information by its unique identifier. Used mostly by game type implementations.
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="noExcept">Don't throw exception if version library is not loaded or type is missing.</param>
            <returns></returns>
        </member>
        <member name="F:NetScriptFramework.Main._Config_Plugin_Path">
            <summary>
            The plugin files path.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main._Config_Plugin_Lib_Path">
            <summary>
            The plugin depdency files path.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main._Config_Debug_CrashLog_Enabled">
            <summary>
            Value saying whether to write crash log or not.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main._Config_Debug_CrashLog_Path">
            <summary>
            The path where to write crash logs.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main._Config_Debug_CrashLog_Append">
            <summary>
            Value saying whether to append all crash logs to same file or create separate files.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main._Config_Debug_CrashLog_StackCount">
            <summary>
            How many values to print from stack.
            </summary>
        </member>
        <member name="F:NetScriptFramework.Main._Config_Debug_CrashLog_Modules">
            <summary>
            Print modules or not.
            </summary>
        </member>
        <member name="M:NetScriptFramework.Main.PrepareAndLoadConfiguration">
            <summary>
            Prepares and loads configuration file. If file failed to load it will attempt to create.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
